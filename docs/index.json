{
  "api/index.html": {
    "href": "api/index.html",
    "title": "PLACEHOLDER | Litdex.Security.RNG",
    "keywords": "PLACEHOLDER TODO: Add .NET projects to the src folder and run docfx to generate REAL API Documentation !"
  },
  "api/Litdex.Security.RNG.html": {
    "href": "api/Litdex.Security.RNG.html",
    "title": "Namespace Litdex.Security.RNG | Litdex.Security.RNG",
    "keywords": "Namespace Litdex.Security.RNG Classes Random Base class of all random. Random32 Base class for Random Number Generator that the internal state produces 32 bit output. Random64 Base class for Random Number Generator that the internal state produces 64 bit output. Interfaces IDistribution Interface structure for distribution. IRNG Interface structure for Random Number Generator (RNG). ISequence Interface structure for Sequence."
  },
  "api/Litdex.Security.RNG.IDistribution.html": {
    "href": "api/Litdex.Security.RNG.IDistribution.html",
    "title": "Interface IDistribution | Litdex.Security.RNG",
    "keywords": "Interface IDistribution Interface structure for distribution. Namespace : Litdex.Security.RNG Assembly : Litdex.Security.RNG.dll Syntax public interface IDistribution Methods | Improve this Doc View Source NextGamma(Double, Double) Generate gamma distribution from 2 numbers. Declaration double NextGamma(double alpha, double beta) Parameters Type Name Description System.Double alpha Alpha uniform number. System.Double beta Beta uniform number. Returns Type Description System.Double Gamma distribution. | Improve this Doc View Source NextGaussian(Double, Double, Boolean) Generate gaussian distribution. Declaration double NextGaussian(double mean = null, double std = null, bool threadSafe = false) Parameters Type Name Description System.Double mean Mean value. System.Double std Standard deviation value. System.Boolean threadSafe By default false . Set true for thread safe but more slower. Returns Type Description System.Double A 64 bit floating point number normal distribution."
  },
  "api/Litdex.Security.RNG.IRNG.html": {
    "href": "api/Litdex.Security.RNG.IRNG.html",
    "title": "Interface IRNG | Litdex.Security.RNG",
    "keywords": "Interface IRNG Interface structure for Random Number Generator (RNG). Namespace : Litdex.Security.RNG Assembly : Litdex.Security.RNG.dll Syntax public interface IRNG Methods | Improve this Doc View Source AlgorithmName() The name of the algorithm this generator implements. Declaration string AlgorithmName() Returns Type Description System.String The name of RNG. | Improve this Doc View Source Fill(Byte[]) Fill the array with random bytes. Declaration void Fill(byte[] bytes) Parameters Type Name Description System.Byte [] bytes Array to fill with random bytes. Remarks order based on system endianess. | Improve this Doc View Source NextBoolean() Generate value from generator. Declaration bool NextBoolean() Returns Type Description System.Boolean true or false . | Improve this Doc View Source NextByte() Generate value from generator. Declaration byte NextByte() Returns Type Description System.Byte Random . | Improve this Doc View Source NextByte(Byte, Byte) Generate value between lower bound and upper bound from generator. Declaration byte NextByte(byte lower, byte upper) Parameters Type Name Description System.Byte lower Lower bound or expected minimum value. System.Byte upper Upper bound or ecpected maximum value. Returns Type Description System.Byte value between lower bound and upper bound. | Improve this Doc View Source NextBytes(Int32) Generate array of random bytes from generator. Declaration byte[] NextBytes(int length) Parameters Type Name Description System.Int32 length Requested output length. Returns Type Description System.Byte [] Array of bytes. Remarks order based on system endianess. | Improve this Doc View Source NextDouble() Generate value from generator. Declaration double NextDouble() Returns Type Description System.Double A 64-bit floating point number. | Improve this Doc View Source NextDouble(Double, Double) Generate value between lower bound and upper bound from generator. Declaration double NextDouble(double lower, double upper) Parameters Type Name Description System.Double lower Lower bound or expected minimum value. System.Double upper Upper bound or ecpected maximum value. Returns Type Description System.Double value between lower bound and upper bound. | Improve this Doc View Source NextInt() Generate value from generator. Declaration uint NextInt() Returns Type Description System.UInt32 A 32-bit unsigned integer. | Improve this Doc View Source NextInt(UInt32, UInt32) Generate value between lower bound and upper bound from generator. Declaration uint NextInt(uint lower, uint upper) Parameters Type Name Description System.UInt32 lower Lower bound or expected minimum value. System.UInt32 upper Upper bound or ecpected maximum value. Returns Type Description System.UInt32 value between lower bound and upper bound. | Improve this Doc View Source NextLong() Generate value from generator. Declaration ulong NextLong() Returns Type Description System.UInt64 A 64-bit unsigned integer. | Improve this Doc View Source NextLong(UInt64, UInt64) Generate value between lower bound and upper bound from generator. Declaration ulong NextLong(ulong lower, ulong upper) Parameters Type Name Description System.UInt64 lower Lower bound or expected minimum value. System.UInt64 upper Upper bound or ecpected maximum value. Returns Type Description System.UInt64 value lower bound and upper bound. | Improve this Doc View Source Reseed() Seed with . Declaration void Reseed()"
  },
  "api/Litdex.Security.RNG.ISequence.html": {
    "href": "api/Litdex.Security.RNG.ISequence.html",
    "title": "Interface ISequence | Litdex.Security.RNG",
    "keywords": "Interface ISequence Interface structure for Sequence. Namespace : Litdex.Security.RNG Assembly : Litdex.Security.RNG.dll Syntax public interface ISequence Methods | Improve this Doc View Source Choice<T>(T[]) Select one element randomly from the given set. Declaration T Choice<T>(T[] items) Parameters Type Name Description T[] items A set of items to select. Returns Type Description T Random element from the given set. Type Parameters Name Description T The type of objects in array. | Improve this Doc View Source Choice<T>(T[], Int32) Select arbitrary element randomly. Declaration T[] Choice<T>(T[] items, int select) Parameters Type Name Description T[] items A set of items to select. System.Int32 select The desired amount to select. Returns Type Description T[] Multiple random elements from the given set. Type Parameters Name Description T The type of objects in array. | Improve this Doc View Source Choice<T>(IEnumerable<T>) Select one element randomly. Declaration T Choice<T>(IEnumerable<T> items) Parameters Type Name Description IEnumerable <T> items A set of items to select. Returns Type Description T Random element from the given set. Type Parameters Name Description T The type of objects in array. | Improve this Doc View Source Choice<T>(IEnumerable<T>, Int32) Select arbitrary element randomly. Declaration T[] Choice<T>(IEnumerable<T> items, int select) Parameters Type Name Description IEnumerable <T> items A set of items to select. System.Int32 select The desired amount to select. Returns Type Description T[] Multiple random elements from the given set. Type Parameters Name Description T The type of objects in array. | Improve this Doc View Source ChoiceAsync<T>(T[], Int32) Select arbitrary element randomly. Declaration Task<T[]> ChoiceAsync<T>(T[] items, int select) Parameters Type Name Description T[] items A set of items to select. System.Int32 select The desired amount to select. Returns Type Description Task <T[]> Multiple random elements from the given set. Type Parameters Name Description T The type of objects in array. | Improve this Doc View Source ChoiceAsync<T>(T[], Int32, CancellationToken) Select arbitrary element randomly. Declaration Task<T[]> ChoiceAsync<T>(T[] items, int select, CancellationToken cancellationToken) Parameters Type Name Description T[] items A set of items to select. System.Int32 select The desired amount to select. CancellationToken cancellationToken Token to cancel the operations. Returns Type Description Task <T[]> Multiple random elements from the given set. Type Parameters Name Description T The type of objects in array. | Improve this Doc View Source ChoiceAsync<T>(IEnumerable<T>, Int32) Select arbitrary element randomly. Declaration Task<T[]> ChoiceAsync<T>(IEnumerable<T> items, int select) Parameters Type Name Description IEnumerable <T> items A set of items to select. System.Int32 select The desired amount to select. Returns Type Description Task <T[]> Multiple random elements from the given set. Type Parameters Name Description T The type of objects in array. | Improve this Doc View Source ChoiceAsync<T>(IEnumerable<T>, Int32, CancellationToken) Select arbitrary element randomly. Declaration Task<T[]> ChoiceAsync<T>(IEnumerable<T> items, int select, CancellationToken cancellationToken) Parameters Type Name Description IEnumerable <T> items A set of items to select. System.Int32 select The desired amount to select. CancellationToken cancellationToken Token to cancel the operations. Returns Type Description Task <T[]> Multiple random elements from the given set. Type Parameters Name Description T The type of objects in array. | Improve this Doc View Source Sample<T>(T[], Int32) Select arbitrary distinct element randomly. Declaration T[] Sample<T>(T[] items, int select) Parameters Type Name Description T[] items A set of items to select. System.Int32 select The desired amount to select. Returns Type Description T[] Multiple random elements from the given set. Type Parameters Name Description T The type of objects in array. | Improve this Doc View Source Sample<T>(IEnumerable<T>, Int32) Select arbitrary distinct element randomly. Declaration T[] Sample<T>(IEnumerable<T> items, int select) Parameters Type Name Description IEnumerable <T> items A set of items to select. System.Int32 select The desired amount to select. Returns Type Description T[] Multiple random elements from the given set. Type Parameters Name Description T The type of objects in array. | Improve this Doc View Source SampleAsync<T>(T[], Int32) Select arbitrary distinct element randomly. Declaration Task<T[]> SampleAsync<T>(T[] items, int select) Parameters Type Name Description T[] items A set of items to select. System.Int32 select The desired amount to select. Returns Type Description Task <T[]> Multiple random elements from the given set. Type Parameters Name Description T The type of objects in array. Remarks Used for large data, objects or arrays. | Improve this Doc View Source SampleAsync<T>(T[], Int32, CancellationToken) Select arbitrary distinct element randomly. Declaration Task<T[]> SampleAsync<T>(T[] items, int select, CancellationToken cancellationToken) Parameters Type Name Description T[] items A set of items to select. System.Int32 select The desired amount to select. CancellationToken cancellationToken Token to cancel the operations. Returns Type Description Task <T[]> Multiple random elements from the given set. Type Parameters Name Description T The type of objects in array. Remarks Used for large data, objects or arrays. | Improve this Doc View Source SampleAsync<T>(IEnumerable<T>, Int32) Select arbitrary distinct element randomly. Declaration Task<T[]> SampleAsync<T>(IEnumerable<T> items, int select) Parameters Type Name Description IEnumerable <T> items A set of items to select. System.Int32 select The desired amount to select. Returns Type Description Task <T[]> Multiple random elements from the given set. Type Parameters Name Description T The type of objects in array. Remarks Used for large data, objects or arrays. | Improve this Doc View Source SampleAsync<T>(IEnumerable<T>, Int32, CancellationToken) Select arbitrary distinct element randomly. Declaration Task<T[]> SampleAsync<T>(IEnumerable<T> items, int select, CancellationToken cancellationToken) Parameters Type Name Description IEnumerable <T> items A set of items to select. System.Int32 select The desired amount to select. CancellationToken cancellationToken Token to cancel the operations. Returns Type Description Task <T[]> Multiple random elements from the given set. Type Parameters Name Description T The type of objects in array. Remarks Used for large data, objects or arrays. | Improve this Doc View Source Shuffle<T>(T[]) Shuffle items with Fisher-Yates shuffle then return the shuffled item in new array. Declaration T[] Shuffle<T>(T[] items) Parameters Type Name Description T[] items A set of items to shuffle. Returns Type Description T[] Array of shuffled items. Type Parameters Name Description T The type of objects in array. | Improve this Doc View Source Shuffle<T>(IEnumerable<T>) Shuffle items with Fisher-Yates shuffle then return the shuffled item in new array. Declaration T[] Shuffle<T>(IEnumerable<T> items) Parameters Type Name Description IEnumerable <T> items A set of items to shuffle. Returns Type Description T[] Array of shuffled items. Type Parameters Name Description T The type of objects in array. | Improve this Doc View Source ShuffleAsync<T>(T[]) Shuffle items with Fisher-Yates shuffle then return the shuffled item in new array. Declaration Task<T[]> ShuffleAsync<T>(T[] items) Parameters Type Name Description T[] items A set of items to shuffle. Returns Type Description Task <T[]> Array of shuffled items. Type Parameters Name Description T The type of objects in array. Remarks Used for large data, objects or arrays. | Improve this Doc View Source ShuffleAsync<T>(T[], CancellationToken) Shuffle items with Fisher-Yates shuffle then return the shuffled item in new array. Declaration Task<T[]> ShuffleAsync<T>(T[] items, CancellationToken cancellationToken) Parameters Type Name Description T[] items A set of items to shuffle. CancellationToken cancellationToken Token to cancel the operations. Returns Type Description Task <T[]> Array of shuffled items. Type Parameters Name Description T The type of objects in array. Remarks Used for large data, objects or arrays. | Improve this Doc View Source ShuffleAsync<T>(IEnumerable<T>) Shuffle items with Fisher-Yates shuffle then return the shuffled item in new array. Declaration Task<T[]> ShuffleAsync<T>(IEnumerable<T> items) Parameters Type Name Description IEnumerable <T> items A set of items to shuffle. Returns Type Description Task <T[]> Array of shuffled items. Type Parameters Name Description T The type of objects in array. Remarks Used for large data, objects or arrays. | Improve this Doc View Source ShuffleAsync<T>(IEnumerable<T>, CancellationToken) Shuffle items with Fisher-Yates shuffle then return the shuffled item in new array. Declaration Task<T[]> ShuffleAsync<T>(IEnumerable<T> items, CancellationToken cancellationToken) Parameters Type Name Description IEnumerable <T> items A set of items to shuffle. CancellationToken cancellationToken Token to cancel the operations. Returns Type Description Task <T[]> Array of shuffled items. Type Parameters Name Description T The type of objects in array. Remarks Used for large data, objects or arrays. | Improve this Doc View Source ShuffleInPlace<T>(T[]) Shuffle items in place with Fisher-Yates shuffle. Declaration void ShuffleInPlace<T>(T[] items) Parameters Type Name Description T[] items A set of items to shuffle. Type Parameters Name Description T The type of objects in array. | Improve this Doc View Source ShuffleInPlaceAsync<T>(T[]) Shuffle items in place with Fisher-Yates shuffle. Declaration Task ShuffleInPlaceAsync<T>(T[] items) Parameters Type Name Description T[] items A set of items to shuffle. Returns Type Description Task Task based operations. Type Parameters Name Description T The type of objects in array. Remarks Used for large data, objects or arrays. | Improve this Doc View Source ShuffleInPlaceAsync<T>(T[], CancellationToken) Shuffle items in place with Fisher-Yates shuffle. Declaration Task ShuffleInPlaceAsync<T>(T[] items, CancellationToken cancellationToken) Parameters Type Name Description T[] items A set of items to shuffle. CancellationToken cancellationToken Token to cancel the operations. Returns Type Description Task Task based operations. Type Parameters Name Description T The type of objects in array. Remarks Used for large data, objects or arrays."
  },
  "api/Litdex.Security.RNG.PRNG.GJrand64.html": {
    "href": "api/Litdex.Security.RNG.PRNG.GJrand64.html",
    "title": "Class GJrand64 | Litdex.Security.RNG",
    "keywords": "Class GJrand64 Implementation of David Blackman's GJrand PRNG(s) Inheritance System.Object Random Random64 GJrand64 Implements IRNG IDistribution ISequence Inherited Members Random64._State Random64._Size Random64.NextBoolean() Random64.NextByte() Random64.NextBytes(Int32) Random64.NextBytesLittleEndian(Int32) Random64.NextBytesBigEndian(Int32) Random64.Fill(Byte[]) Random64.FillLittleEndian(Byte[]) Random64.FillBigEndian(Byte[]) Random64.NextInt() Random64.NextLong() Random._InitialRoll Random.ToString() Random.NextByte(Byte, Byte) Random.NextInt(UInt32, UInt32) Random.NextLong(UInt64, UInt64) Random.NextDouble() Random.NextDouble(Double, Double) Random._NextGaussian Random.NextGaussian(Double, Double, Boolean) Random.NextGamma(Double, Double) Random.Choice<T>(T[]) Random.Choice<T>(T[], Int32) Random.ChoiceAsync<T>(T[], Int32) Random.ChoiceAsync<T>(T[], Int32, CancellationToken) Random.Choice<T>(IEnumerable<T>) Random.Choice<T>(IEnumerable<T>, Int32) Random.ChoiceAsync<T>(IEnumerable<T>, Int32) Random.ChoiceAsync<T>(IEnumerable<T>, Int32, CancellationToken) Random.Sample<T>(T[], Int32) Random.SampleAsync<T>(T[], Int32) Random.SampleAsync<T>(T[], Int32, CancellationToken) Random.Sample<T>(IEnumerable<T>, Int32) Random.SampleAsync<T>(IEnumerable<T>, Int32) Random.SampleAsync<T>(IEnumerable<T>, Int32, CancellationToken) Random.Shuffle<T>(T[]) Random.ShuffleAsync<T>(T[]) Random.ShuffleAsync<T>(T[], CancellationToken) Random.Shuffle<T>(IEnumerable<T>) Random.ShuffleAsync<T>(IEnumerable<T>) Random.ShuffleAsync<T>(IEnumerable<T>, CancellationToken) Random.ShuffleInPlace<T>(T[]) Random.ShuffleInPlaceAsync<T>(T[]) Random.ShuffleInPlaceAsync<T>(T[], CancellationToken) Namespace : Litdex.Security.RNG.PRNG Assembly : Litdex.Security.RNG.dll Syntax public class GJrand64 : Random64, IRNG, IDistribution, ISequence Constructors | Improve this Doc View Source GJrand64(UInt64, UInt64, UInt64, UInt64) Create an instance of GJrand64 object. Declaration public GJrand64(ulong seed1 = 14627392581574549229UL, ulong seed2 = null, ulong seed3 = null, ulong seed4 = null) Parameters Type Name Description System.UInt64 seed1 First seed. System.UInt64 seed2 Second seed. System.UInt64 seed3 Third seed. System.UInt64 seed4 Fourth seed. | Improve this Doc View Source GJrand64(UInt64[]) Create an instance of GJrand64 object. Declaration public GJrand64(ulong[] seed) Parameters Type Name Description System.UInt64 [] seed Array of 64 bit unsigned integer with minimum length of 4. Methods | Improve this Doc View Source Advance() Declaration protected void Advance() | Improve this Doc View Source AlgorithmName() Declaration public override string AlgorithmName() Returns Type Description System.String Overrides Random64.AlgorithmName() | Improve this Doc View Source Finalize() Declaration protected void Finalize() | Improve this Doc View Source Next() Declaration protected override ulong Next() Returns Type Description System.UInt64 Overrides Random64.Next() | Improve this Doc View Source Reseed() Declaration public override void Reseed() Overrides Random.Reseed() | Improve this Doc View Source SetSeed(UInt64, UInt64, UInt64, UInt64) Set Litdex.Security.RNG seed manually. Declaration public void SetSeed(ulong seed1, ulong seed2, ulong seed3, ulong seed4) Parameters Type Name Description System.UInt64 seed1 System.UInt64 seed2 System.UInt64 seed3 System.UInt64 seed4 | Improve this Doc View Source SetSeed(UInt64[]) Declaration public override void SetSeed(params ulong[] seed) Parameters Type Name Description System.UInt64 [] seed Overrides Random64.SetSeed(UInt64[]) Implements IRNG IDistribution ISequence"
  },
  "api/Litdex.Security.RNG.PRNG.html": {
    "href": "api/Litdex.Security.RNG.PRNG.html",
    "title": "Namespace Litdex.Security.RNG.PRNG | Litdex.Security.RNG",
    "keywords": "Namespace Litdex.Security.RNG.PRNG Classes GJrand64 Implementation of David Blackman's GJrand PRNG(s) JSF32 Implementation of a Bob Jenkins Small Fast (Noncryptographic) PRNGs. JSF32t Improved version of JSF32 with 3 rotate. JSF64 Implementation of a Bob Jenkins Small Fast (Noncryptographic) PRNGs. MiddleSquareWeylSequence Improved version from Middle Square Method, invented by John Von Neumann. PcgRxsMXs64 A Permuted Congruential Generator (PCG) that is composed of a 64-bit Linear Congruential Generator(LCG) combined with the RXS-M-XS (random xorshift; multiply; xorshift) output transformation to create 64-bit output. PcgXshRr32 A Permuted Congruential Generator (PCG) that is composed of a 64-bit Linear Congruential Generator (LCG) combined with the XSH-RR (xorshift; random rotate) output transformation to create 32-bit output. PcgXshRs32 A Permuted Congruential Generator (PCG) that is composed of a 64-bit Linear Congruential Generator (LCG) combined with the XSH-RS (xorshift; random shift) output transformation to create 32-bit output. RomuDuo Romu random variations, might be faster than RomuTrio due to using fewer registers, but might struggle with massive jobs. Est. capacity = 2^61 bytes. Register pressure = 5. State size = 128 bits. RomuDuoJr Romu random variations, the fastest generator using 64-bit arith., but not suited for huge jobs. Est. capacity = 2^51 bytes. Register pressure = 4. State size = 128 bits. RomuMono32 Romu random variations, 32-bit arithmetic: Suitable only up to 2^26 output-values. Outputs 16-bit numbers. Fixed period of (2^32)-47. Must be seeded using the romuMono32_init function. Capacity = 2^27 bytes. Register pressure = 2. State size = 32 bits. RomuQuad Romu random variations, more robust than anyone could need, but uses more registers than RomuTrio. Est. capacity >= 2^90 bytes. Register pressure = 8 (high). State size = 256 bits. RomuQuad32 Romu random variations, 32-bit arithmetic: Good for general purpose use. Est. capacity >= 2^62 bytes. Register pressure = 7. State size = 128 bits. RomuTrio Romu random variations, great for general purpose work, including huge jobs. Est. capacity = 2^75 bytes. Register pressure = 6. State size = 192 bits. RomuTrio32 Romu random variations, 32-bit arithmetic: Good for general purpose use, except for huge jobs. Est. capacity >= 2^53 bytes. Register pressure = 5. State size = 96 bits. Seiran LFSR-based pseudorandom number generators. SFC32 Implementation of Small, Fast, Counting (SFC) 32-bit generator of Chris Doty-Humphrey. The original source is the PractRand test suite SFC64 Implementation of Small, Fast, Counting (SFC) 64-bit generator of Chris Doty-Humphrey. The original source is the PractRand test suite Shioi LFSR-based pseudorandom number generators. It have interesting jump characteristics. Shishua Shift, Shuffle, Add PRNG. SplitMix64 SplitMix64 PRNG Algorithm. Squares Counter-based RNG based on MiddleSquareWeylSequence . Tyche Tyche is based on ChaCha's quarter-round. Tychei Inverse Tyche . Wyrand Based on Wyhash from https://github.com/wangyi-fudan/wyhash Xoroshiro128Plus Xoroshiro128+ PRNG is improved from Xoroshift128. Xoroshiro128PlusPlus Variations of Xoroshiro128Plus . Xoroshiro128StarStar Variations of Xoroshiro128Plus . Xoshiro256Plus (XOR/shift/rotate) all-purpose generators. Xoshiro256PlusPlus Variations of Xoshiro256Plus . Xoshiro256StarStar Variations of Xoshiro256Plus . Xoshiro512Plus (XOR/shift/rotate) all-purpose generators. Xoshiro512PlusPlus Vartions of Xoshiro512Plus . Xoshiro512StarStar Vartions of Xoshiro512Plus ."
  },
  "api/Litdex.Security.RNG.PRNG.JSF32.html": {
    "href": "api/Litdex.Security.RNG.PRNG.JSF32.html",
    "title": "Class JSF32 | Litdex.Security.RNG",
    "keywords": "Class JSF32 Implementation of a Bob Jenkins Small Fast (Noncryptographic) PRNGs. Inheritance System.Object Random Random32 JSF32 JSF32t Implements IRNG IDistribution ISequence Inherited Members Random32._State Random32._Size Random32.NextBoolean() Random32.NextByte() Random32.NextBytes(Int32) Random32.NextBytesLittleEndian(Int32) Random32.NextBytesBigEndian(Int32) Random32.Fill(Byte[]) Random32.FillLittleEndian(Byte[]) Random32.FillBigEndian(Byte[]) Random32.NextInt() Random32.NextLong() Random._InitialRoll Random.ToString() Random.NextByte(Byte, Byte) Random.NextInt(UInt32, UInt32) Random.NextLong(UInt64, UInt64) Random.NextDouble() Random.NextDouble(Double, Double) Random._NextGaussian Random.NextGaussian(Double, Double, Boolean) Random.NextGamma(Double, Double) Random.Choice<T>(T[]) Random.Choice<T>(T[], Int32) Random.ChoiceAsync<T>(T[], Int32) Random.ChoiceAsync<T>(T[], Int32, CancellationToken) Random.Choice<T>(IEnumerable<T>) Random.Choice<T>(IEnumerable<T>, Int32) Random.ChoiceAsync<T>(IEnumerable<T>, Int32) Random.ChoiceAsync<T>(IEnumerable<T>, Int32, CancellationToken) Random.Sample<T>(T[], Int32) Random.SampleAsync<T>(T[], Int32) Random.SampleAsync<T>(T[], Int32, CancellationToken) Random.Sample<T>(IEnumerable<T>, Int32) Random.SampleAsync<T>(IEnumerable<T>, Int32) Random.SampleAsync<T>(IEnumerable<T>, Int32, CancellationToken) Random.Shuffle<T>(T[]) Random.ShuffleAsync<T>(T[]) Random.ShuffleAsync<T>(T[], CancellationToken) Random.Shuffle<T>(IEnumerable<T>) Random.ShuffleAsync<T>(IEnumerable<T>) Random.ShuffleAsync<T>(IEnumerable<T>, CancellationToken) Random.ShuffleInPlace<T>(T[]) Random.ShuffleInPlaceAsync<T>(T[]) Random.ShuffleInPlaceAsync<T>(T[], CancellationToken) Namespace : Litdex.Security.RNG.PRNG Assembly : Litdex.Security.RNG.dll Syntax public class JSF32 : Random32, IRNG, IDistribution, ISequence Remarks Source: http://burtleburtle.net/bob/rand/smallprng.html Constructors | Improve this Doc View Source JSF32(UInt32) Create an instance of JSF32 object. Declaration public JSF32(uint seed = null) Parameters Type Name Description System.UInt32 seed RNG seed. Methods | Improve this Doc View Source AlgorithmName() Declaration public override string AlgorithmName() Returns Type Description System.String Overrides Random32.AlgorithmName() | Improve this Doc View Source Finalize() Destructor. Declaration protected void Finalize() | Improve this Doc View Source Next() Declaration protected override uint Next() Returns Type Description System.UInt32 Overrides Random32.Next() | Improve this Doc View Source Reseed() Declaration public override void Reseed() Overrides Random.Reseed() | Improve this Doc View Source SetSeed(UInt32) Set Litdex.Security.RNG seed manually. Declaration public void SetSeed(uint seed) Parameters Type Name Description System.UInt32 seed RNG seed. | Improve this Doc View Source SetSeed(UInt32[]) Declaration public override void SetSeed(params uint[] seed) Parameters Type Name Description System.UInt32 [] seed Overrides Random32.SetSeed(UInt32[]) Implements IRNG IDistribution ISequence"
  },
  "api/Litdex.Security.RNG.PRNG.JSF32t.html": {
    "href": "api/Litdex.Security.RNG.PRNG.JSF32t.html",
    "title": "Class JSF32t | Litdex.Security.RNG",
    "keywords": "Class JSF32t Improved version of JSF32 with 3 rotate. Inheritance System.Object Random Random32 JSF32 JSF32t Implements IRNG IDistribution ISequence Inherited Members JSF32.Reseed() JSF32.SetSeed(UInt32) JSF32.SetSeed(UInt32[]) Random32._State Random32._Size Random32.NextBoolean() Random32.NextByte() Random32.NextBytes(Int32) Random32.NextBytesLittleEndian(Int32) Random32.NextBytesBigEndian(Int32) Random32.Fill(Byte[]) Random32.FillLittleEndian(Byte[]) Random32.FillBigEndian(Byte[]) Random32.NextInt() Random32.NextLong() Random._InitialRoll Random.ToString() Random.NextByte(Byte, Byte) Random.NextInt(UInt32, UInt32) Random.NextLong(UInt64, UInt64) Random.NextDouble() Random.NextDouble(Double, Double) Random._NextGaussian Random.NextGaussian(Double, Double, Boolean) Random.NextGamma(Double, Double) Random.Choice<T>(T[]) Random.Choice<T>(T[], Int32) Random.ChoiceAsync<T>(T[], Int32) Random.ChoiceAsync<T>(T[], Int32, CancellationToken) Random.Choice<T>(IEnumerable<T>) Random.Choice<T>(IEnumerable<T>, Int32) Random.ChoiceAsync<T>(IEnumerable<T>, Int32) Random.ChoiceAsync<T>(IEnumerable<T>, Int32, CancellationToken) Random.Sample<T>(T[], Int32) Random.SampleAsync<T>(T[], Int32) Random.SampleAsync<T>(T[], Int32, CancellationToken) Random.Sample<T>(IEnumerable<T>, Int32) Random.SampleAsync<T>(IEnumerable<T>, Int32) Random.SampleAsync<T>(IEnumerable<T>, Int32, CancellationToken) Random.Shuffle<T>(T[]) Random.ShuffleAsync<T>(T[]) Random.ShuffleAsync<T>(T[], CancellationToken) Random.Shuffle<T>(IEnumerable<T>) Random.ShuffleAsync<T>(IEnumerable<T>) Random.ShuffleAsync<T>(IEnumerable<T>, CancellationToken) Random.ShuffleInPlace<T>(T[]) Random.ShuffleInPlaceAsync<T>(T[]) Random.ShuffleInPlaceAsync<T>(T[], CancellationToken) Namespace : Litdex.Security.RNG.PRNG Assembly : Litdex.Security.RNG.dll Syntax public class JSF32t : JSF32, IRNG, IDistribution, ISequence Constructors | Improve this Doc View Source JSF32t(UInt32) Create an instance of JSF32t object. Declaration public JSF32t(uint seed = null) Parameters Type Name Description System.UInt32 seed RNG seed. Methods | Improve this Doc View Source AlgorithmName() Declaration public override string AlgorithmName() Returns Type Description System.String Overrides JSF32.AlgorithmName() | Improve this Doc View Source Finalize() Destructor. Declaration protected void Finalize() | Improve this Doc View Source Next() Declaration protected override uint Next() Returns Type Description System.UInt32 Overrides JSF32.Next() Implements IRNG IDistribution ISequence"
  },
  "api/Litdex.Security.RNG.PRNG.JSF64.html": {
    "href": "api/Litdex.Security.RNG.PRNG.JSF64.html",
    "title": "Class JSF64 | Litdex.Security.RNG",
    "keywords": "Class JSF64 Implementation of a Bob Jenkins Small Fast (Noncryptographic) PRNGs. Inheritance System.Object Random Random64 JSF64 Implements IRNG IDistribution ISequence Inherited Members Random64._State Random64._Size Random64.NextBoolean() Random64.NextByte() Random64.NextBytes(Int32) Random64.NextBytesLittleEndian(Int32) Random64.NextBytesBigEndian(Int32) Random64.Fill(Byte[]) Random64.FillLittleEndian(Byte[]) Random64.FillBigEndian(Byte[]) Random64.NextInt() Random64.NextLong() Random._InitialRoll Random.ToString() Random.NextByte(Byte, Byte) Random.NextInt(UInt32, UInt32) Random.NextLong(UInt64, UInt64) Random.NextDouble() Random.NextDouble(Double, Double) Random._NextGaussian Random.NextGaussian(Double, Double, Boolean) Random.NextGamma(Double, Double) Random.Choice<T>(T[]) Random.Choice<T>(T[], Int32) Random.ChoiceAsync<T>(T[], Int32) Random.ChoiceAsync<T>(T[], Int32, CancellationToken) Random.Choice<T>(IEnumerable<T>) Random.Choice<T>(IEnumerable<T>, Int32) Random.ChoiceAsync<T>(IEnumerable<T>, Int32) Random.ChoiceAsync<T>(IEnumerable<T>, Int32, CancellationToken) Random.Sample<T>(T[], Int32) Random.SampleAsync<T>(T[], Int32) Random.SampleAsync<T>(T[], Int32, CancellationToken) Random.Sample<T>(IEnumerable<T>, Int32) Random.SampleAsync<T>(IEnumerable<T>, Int32) Random.SampleAsync<T>(IEnumerable<T>, Int32, CancellationToken) Random.Shuffle<T>(T[]) Random.ShuffleAsync<T>(T[]) Random.ShuffleAsync<T>(T[], CancellationToken) Random.Shuffle<T>(IEnumerable<T>) Random.ShuffleAsync<T>(IEnumerable<T>) Random.ShuffleAsync<T>(IEnumerable<T>, CancellationToken) Random.ShuffleInPlace<T>(T[]) Random.ShuffleInPlaceAsync<T>(T[]) Random.ShuffleInPlaceAsync<T>(T[], CancellationToken) Namespace : Litdex.Security.RNG.PRNG Assembly : Litdex.Security.RNG.dll Syntax public class JSF64 : Random64, IRNG, IDistribution, ISequence Remarks Source: http://burtleburtle.net/bob/rand/smallprng.html Constructors | Improve this Doc View Source JSF64(UInt64) Create an instance of JSF64 object. Declaration public JSF64(ulong seed = null) Parameters Type Name Description System.UInt64 seed RNG seed. Methods | Improve this Doc View Source AlgorithmName() Declaration public override string AlgorithmName() Returns Type Description System.String Overrides Random64.AlgorithmName() | Improve this Doc View Source Finalize() Destructor. Declaration protected void Finalize() | Improve this Doc View Source Next() Declaration protected override ulong Next() Returns Type Description System.UInt64 Overrides Random64.Next() | Improve this Doc View Source Reseed() Declaration public override void Reseed() Overrides Random.Reseed() | Improve this Doc View Source SetSeed(UInt64) Set Litdex.Security.RNG seed manually. Declaration public void SetSeed(ulong seed) Parameters Type Name Description System.UInt64 seed RNG seed. | Improve this Doc View Source SetSeed(UInt64[]) Declaration public override void SetSeed(params ulong[] seed) Parameters Type Name Description System.UInt64 [] seed Overrides Random64.SetSeed(UInt64[]) Implements IRNG IDistribution ISequence"
  },
  "api/Litdex.Security.RNG.PRNG.MiddleSquareWeylSequence.html": {
    "href": "api/Litdex.Security.RNG.PRNG.MiddleSquareWeylSequence.html",
    "title": "Class MiddleSquareWeylSequence | Litdex.Security.RNG",
    "keywords": "Class MiddleSquareWeylSequence Improved version from Middle Square Method, invented by John Von Neumann. Inheritance System.Object Random Random32 MiddleSquareWeylSequence Implements IRNG IDistribution ISequence Inherited Members Random32._State Random32._Size Random32.SetSeed(UInt32[]) Random32.NextBoolean() Random32.NextByte() Random32.NextBytes(Int32) Random32.NextBytesLittleEndian(Int32) Random32.NextBytesBigEndian(Int32) Random32.Fill(Byte[]) Random32.FillLittleEndian(Byte[]) Random32.FillBigEndian(Byte[]) Random32.NextInt() Random32.NextLong() Random._InitialRoll Random.ToString() Random.NextByte(Byte, Byte) Random.NextInt(UInt32, UInt32) Random.NextLong(UInt64, UInt64) Random.NextDouble() Random.NextDouble(Double, Double) Random._NextGaussian Random.NextGaussian(Double, Double, Boolean) Random.NextGamma(Double, Double) Random.Choice<T>(T[]) Random.Choice<T>(T[], Int32) Random.ChoiceAsync<T>(T[], Int32) Random.ChoiceAsync<T>(T[], Int32, CancellationToken) Random.Choice<T>(IEnumerable<T>) Random.Choice<T>(IEnumerable<T>, Int32) Random.ChoiceAsync<T>(IEnumerable<T>, Int32) Random.ChoiceAsync<T>(IEnumerable<T>, Int32, CancellationToken) Random.Sample<T>(T[], Int32) Random.SampleAsync<T>(T[], Int32) Random.SampleAsync<T>(T[], Int32, CancellationToken) Random.Sample<T>(IEnumerable<T>, Int32) Random.SampleAsync<T>(IEnumerable<T>, Int32) Random.SampleAsync<T>(IEnumerable<T>, Int32, CancellationToken) Random.Shuffle<T>(T[]) Random.ShuffleAsync<T>(T[]) Random.ShuffleAsync<T>(T[], CancellationToken) Random.Shuffle<T>(IEnumerable<T>) Random.ShuffleAsync<T>(IEnumerable<T>) Random.ShuffleAsync<T>(IEnumerable<T>, CancellationToken) Random.ShuffleInPlace<T>(T[]) Random.ShuffleInPlaceAsync<T>(T[]) Random.ShuffleInPlaceAsync<T>(T[], CancellationToken) Namespace : Litdex.Security.RNG.PRNG Assembly : Litdex.Security.RNG.dll Syntax public class MiddleSquareWeylSequence : Random32, IRNG, IDistribution, ISequence Remarks Source: https://arxiv.org/abs/1704.00358 Constructors | Improve this Doc View Source MiddleSquareWeylSequence(UInt64) Create an instance of MiddleSquareWeylSequence object. Declaration public MiddleSquareWeylSequence(ulong seed = null) Parameters Type Name Description System.UInt64 seed RNG seed. Methods | Improve this Doc View Source AlgorithmName() Declaration public override string AlgorithmName() Returns Type Description System.String Overrides Random32.AlgorithmName() | Improve this Doc View Source Finalize() Destructor. Declaration protected void Finalize() | Improve this Doc View Source Next() Declaration protected override uint Next() Returns Type Description System.UInt32 Overrides Random32.Next() | Improve this Doc View Source Reseed() Declaration public override void Reseed() Overrides Random.Reseed() | Improve this Doc View Source SetSeed(UInt64) Set Litdex.Security.RNG seed manually. Declaration public void SetSeed(ulong seed) Parameters Type Name Description System.UInt64 seed RNG seed. Implements IRNG IDistribution ISequence"
  },
  "api/Litdex.Security.RNG.PRNG.PcgRxsMXs64.html": {
    "href": "api/Litdex.Security.RNG.PRNG.PcgRxsMXs64.html",
    "title": "Class PcgRxsMXs64 | Litdex.Security.RNG",
    "keywords": "Class PcgRxsMXs64 A Permuted Congruential Generator (PCG) that is composed of a 64-bit Linear Congruential Generator(LCG) combined with the RXS-M-XS (random xorshift; multiply; xorshift) output transformation to create 64-bit output. Inheritance System.Object Random Random64 PcgRxsMXs64 Implements IRNG IDistribution ISequence Inherited Members Random64._State Random64._Size Random64.NextBoolean() Random64.NextByte() Random64.NextBytes(Int32) Random64.NextBytesLittleEndian(Int32) Random64.NextBytesBigEndian(Int32) Random64.Fill(Byte[]) Random64.FillLittleEndian(Byte[]) Random64.FillBigEndian(Byte[]) Random64.NextInt() Random64.NextLong() Random._InitialRoll Random.ToString() Random.NextByte(Byte, Byte) Random.NextInt(UInt32, UInt32) Random.NextLong(UInt64, UInt64) Random.NextDouble() Random.NextDouble(Double, Double) Random._NextGaussian Random.NextGaussian(Double, Double, Boolean) Random.NextGamma(Double, Double) Random.Choice<T>(T[]) Random.Choice<T>(T[], Int32) Random.ChoiceAsync<T>(T[], Int32) Random.ChoiceAsync<T>(T[], Int32, CancellationToken) Random.Choice<T>(IEnumerable<T>) Random.Choice<T>(IEnumerable<T>, Int32) Random.ChoiceAsync<T>(IEnumerable<T>, Int32) Random.ChoiceAsync<T>(IEnumerable<T>, Int32, CancellationToken) Random.Sample<T>(T[], Int32) Random.SampleAsync<T>(T[], Int32) Random.SampleAsync<T>(T[], Int32, CancellationToken) Random.Sample<T>(IEnumerable<T>, Int32) Random.SampleAsync<T>(IEnumerable<T>, Int32) Random.SampleAsync<T>(IEnumerable<T>, Int32, CancellationToken) Random.Shuffle<T>(T[]) Random.ShuffleAsync<T>(T[]) Random.ShuffleAsync<T>(T[], CancellationToken) Random.Shuffle<T>(IEnumerable<T>) Random.ShuffleAsync<T>(IEnumerable<T>) Random.ShuffleAsync<T>(IEnumerable<T>, CancellationToken) Random.ShuffleInPlace<T>(T[]) Random.ShuffleInPlaceAsync<T>(T[]) Random.ShuffleInPlaceAsync<T>(T[], CancellationToken) Namespace : Litdex.Security.RNG.PRNG Assembly : Litdex.Security.RNG.dll Syntax public class PcgRxsMXs64 : Random64, IRNG, IDistribution, ISequence Remarks https://www.pcg-random.org/ Constructors | Improve this Doc View Source PcgRxsMXs64(UInt64, UInt64) Create an instance of PcgRxsMXs64 object. Declaration public PcgRxsMXs64(ulong seed = null, ulong increment = null) Parameters Type Name Description System.UInt64 seed RNG seed. System.UInt64 increment Increment step. Fields | Improve this Doc View Source _Increment Declaration protected ulong _Increment Field Value Type Description System.UInt64 | Improve this Doc View Source _Multiplier Declaration protected const ulong _Multiplier = null Field Value Type Description System.UInt64 Methods | Improve this Doc View Source AlgorithmName() Declaration public override string AlgorithmName() Returns Type Description System.String Overrides Random64.AlgorithmName() | Improve this Doc View Source Finalize() Destructor. Declaration protected void Finalize() | Improve this Doc View Source Next() Declaration protected override ulong Next() Returns Type Description System.UInt64 Overrides Random64.Next() | Improve this Doc View Source Reseed() Declaration public override void Reseed() Overrides Random.Reseed() | Improve this Doc View Source SetSeed(UInt64, UInt64) Set Litdex.Security.RNG seed manually. Declaration public void SetSeed(ulong seed, ulong increment) Parameters Type Name Description System.UInt64 seed RNG seed. System.UInt64 increment Increment step. | Improve this Doc View Source SetSeed(UInt64[]) Declaration public override void SetSeed(params ulong[] seed) Parameters Type Name Description System.UInt64 [] seed Overrides Random64.SetSeed(UInt64[]) Implements IRNG IDistribution ISequence"
  },
  "api/Litdex.Security.RNG.PRNG.PcgXshRr32.html": {
    "href": "api/Litdex.Security.RNG.PRNG.PcgXshRr32.html",
    "title": "Class PcgXshRr32 | Litdex.Security.RNG",
    "keywords": "Class PcgXshRr32 A Permuted Congruential Generator (PCG) that is composed of a 64-bit Linear Congruential Generator (LCG) combined with the XSH-RR (xorshift; random rotate) output transformation to create 32-bit output. Inheritance System.Object Random Random32 PcgXshRr32 PcgXshRs32 Implements IRNG IDistribution ISequence Inherited Members Random32._State Random32._Size Random32.NextBoolean() Random32.NextByte() Random32.NextBytes(Int32) Random32.NextBytesLittleEndian(Int32) Random32.NextBytesBigEndian(Int32) Random32.Fill(Byte[]) Random32.FillLittleEndian(Byte[]) Random32.FillBigEndian(Byte[]) Random32.NextInt() Random32.NextLong() Random._InitialRoll Random.ToString() Random.NextByte(Byte, Byte) Random.NextInt(UInt32, UInt32) Random.NextLong(UInt64, UInt64) Random.NextDouble() Random.NextDouble(Double, Double) Random._NextGaussian Random.NextGaussian(Double, Double, Boolean) Random.NextGamma(Double, Double) Random.Choice<T>(T[]) Random.Choice<T>(T[], Int32) Random.ChoiceAsync<T>(T[], Int32) Random.ChoiceAsync<T>(T[], Int32, CancellationToken) Random.Choice<T>(IEnumerable<T>) Random.Choice<T>(IEnumerable<T>, Int32) Random.ChoiceAsync<T>(IEnumerable<T>, Int32) Random.ChoiceAsync<T>(IEnumerable<T>, Int32, CancellationToken) Random.Sample<T>(T[], Int32) Random.SampleAsync<T>(T[], Int32) Random.SampleAsync<T>(T[], Int32, CancellationToken) Random.Sample<T>(IEnumerable<T>, Int32) Random.SampleAsync<T>(IEnumerable<T>, Int32) Random.SampleAsync<T>(IEnumerable<T>, Int32, CancellationToken) Random.Shuffle<T>(T[]) Random.ShuffleAsync<T>(T[]) Random.ShuffleAsync<T>(T[], CancellationToken) Random.Shuffle<T>(IEnumerable<T>) Random.ShuffleAsync<T>(IEnumerable<T>) Random.ShuffleAsync<T>(IEnumerable<T>, CancellationToken) Random.ShuffleInPlace<T>(T[]) Random.ShuffleInPlaceAsync<T>(T[]) Random.ShuffleInPlaceAsync<T>(T[], CancellationToken) Namespace : Litdex.Security.RNG.PRNG Assembly : Litdex.Security.RNG.dll Syntax public class PcgXshRr32 : Random32, IRNG, IDistribution, ISequence Remarks Source: https://www.pcg-random.org/ Constructors | Improve this Doc View Source PcgXshRr32(UInt64, UInt64) Create an instance of PcgXshRr32 object. Declaration public PcgXshRr32(ulong seed = null, ulong increment = null) Parameters Type Name Description System.UInt64 seed RNG seed. System.UInt64 increment Increment step. Fields | Improve this Doc View Source _Increment Declaration protected ulong _Increment Field Value Type Description System.UInt64 | Improve this Doc View Source _Multiplier Declaration protected const ulong _Multiplier = null Field Value Type Description System.UInt64 | Improve this Doc View Source _State0 Declaration protected ulong _State0 Field Value Type Description System.UInt64 Methods | Improve this Doc View Source AlgorithmName() Declaration public override string AlgorithmName() Returns Type Description System.String Overrides Random32.AlgorithmName() | Improve this Doc View Source Finalize() Destructor. Declaration protected void Finalize() | Improve this Doc View Source Next() Declaration protected override uint Next() Returns Type Description System.UInt32 Overrides Random32.Next() | Improve this Doc View Source Reseed() Declaration public override void Reseed() Overrides Random.Reseed() | Improve this Doc View Source SetSeed(UInt32[]) Declaration public override void SetSeed(params uint[] seed) Parameters Type Name Description System.UInt32 [] seed Overrides Random32.SetSeed(UInt32[]) | Improve this Doc View Source SetSeed(UInt64, UInt64) Set Litdex.Security.RNG seed manually. Declaration public void SetSeed(ulong seed, ulong increment) Parameters Type Name Description System.UInt64 seed RNG seed. System.UInt64 increment Increment step. Implements IRNG IDistribution ISequence"
  },
  "api/Litdex.Security.RNG.PRNG.PcgXshRs32.html": {
    "href": "api/Litdex.Security.RNG.PRNG.PcgXshRs32.html",
    "title": "Class PcgXshRs32 | Litdex.Security.RNG",
    "keywords": "Class PcgXshRs32 A Permuted Congruential Generator (PCG) that is composed of a 64-bit Linear Congruential Generator (LCG) combined with the XSH-RS (xorshift; random shift) output transformation to create 32-bit output. Inheritance System.Object Random Random32 PcgXshRr32 PcgXshRs32 Implements IRNG IDistribution ISequence Inherited Members PcgXshRr32._State0 PcgXshRr32._Increment PcgXshRr32._Multiplier PcgXshRr32.Reseed() PcgXshRr32.SetSeed(UInt64, UInt64) PcgXshRr32.SetSeed(UInt32[]) Random32._State Random32._Size Random32.NextBoolean() Random32.NextByte() Random32.NextBytes(Int32) Random32.NextBytesLittleEndian(Int32) Random32.NextBytesBigEndian(Int32) Random32.Fill(Byte[]) Random32.FillLittleEndian(Byte[]) Random32.FillBigEndian(Byte[]) Random32.NextInt() Random32.NextLong() Random._InitialRoll Random.ToString() Random.NextByte(Byte, Byte) Random.NextInt(UInt32, UInt32) Random.NextLong(UInt64, UInt64) Random.NextDouble() Random.NextDouble(Double, Double) Random._NextGaussian Random.NextGaussian(Double, Double, Boolean) Random.NextGamma(Double, Double) Random.Choice<T>(T[]) Random.Choice<T>(T[], Int32) Random.ChoiceAsync<T>(T[], Int32) Random.ChoiceAsync<T>(T[], Int32, CancellationToken) Random.Choice<T>(IEnumerable<T>) Random.Choice<T>(IEnumerable<T>, Int32) Random.ChoiceAsync<T>(IEnumerable<T>, Int32) Random.ChoiceAsync<T>(IEnumerable<T>, Int32, CancellationToken) Random.Sample<T>(T[], Int32) Random.SampleAsync<T>(T[], Int32) Random.SampleAsync<T>(T[], Int32, CancellationToken) Random.Sample<T>(IEnumerable<T>, Int32) Random.SampleAsync<T>(IEnumerable<T>, Int32) Random.SampleAsync<T>(IEnumerable<T>, Int32, CancellationToken) Random.Shuffle<T>(T[]) Random.ShuffleAsync<T>(T[]) Random.ShuffleAsync<T>(T[], CancellationToken) Random.Shuffle<T>(IEnumerable<T>) Random.ShuffleAsync<T>(IEnumerable<T>) Random.ShuffleAsync<T>(IEnumerable<T>, CancellationToken) Random.ShuffleInPlace<T>(T[]) Random.ShuffleInPlaceAsync<T>(T[]) Random.ShuffleInPlaceAsync<T>(T[], CancellationToken) Namespace : Litdex.Security.RNG.PRNG Assembly : Litdex.Security.RNG.dll Syntax public class PcgXshRs32 : PcgXshRr32, IRNG, IDistribution, ISequence Remarks Source: https://www.pcg-random.org/ Constructors | Improve this Doc View Source PcgXshRs32(UInt64, UInt64) Create an instance of PcgXshRs32 object. Declaration public PcgXshRs32(ulong seed = null, ulong increment = null) Parameters Type Name Description System.UInt64 seed RNG seed. System.UInt64 increment Increment step. Methods | Improve this Doc View Source AlgorithmName() Declaration public override string AlgorithmName() Returns Type Description System.String Overrides PcgXshRr32.AlgorithmName() | Improve this Doc View Source Finalize() Destructor. Declaration protected void Finalize() | Improve this Doc View Source Next() Declaration protected override uint Next() Returns Type Description System.UInt32 Overrides PcgXshRr32.Next() Implements IRNG IDistribution ISequence"
  },
  "api/Litdex.Security.RNG.PRNG.RomuDuo.html": {
    "href": "api/Litdex.Security.RNG.PRNG.RomuDuo.html",
    "title": "Class RomuDuo | Litdex.Security.RNG",
    "keywords": "Class RomuDuo Romu random variations, might be faster than RomuTrio due to using fewer registers, but might struggle with massive jobs. Est. capacity = 2^61 bytes. Register pressure = 5. State size = 128 bits. Inheritance System.Object Random Random64 RomuDuo RomuDuoJr Implements IRNG IDistribution ISequence Inherited Members Random64._State Random64._Size Random64.SetSeed(UInt64[]) Random64.NextBoolean() Random64.NextByte() Random64.NextBytes(Int32) Random64.NextBytesLittleEndian(Int32) Random64.NextBytesBigEndian(Int32) Random64.Fill(Byte[]) Random64.FillLittleEndian(Byte[]) Random64.FillBigEndian(Byte[]) Random64.NextInt() Random64.NextLong() Random._InitialRoll Random.ToString() Random.NextByte(Byte, Byte) Random.NextInt(UInt32, UInt32) Random.NextLong(UInt64, UInt64) Random.NextDouble() Random.NextDouble(Double, Double) Random._NextGaussian Random.NextGaussian(Double, Double, Boolean) Random.NextGamma(Double, Double) Random.Choice<T>(T[]) Random.Choice<T>(T[], Int32) Random.ChoiceAsync<T>(T[], Int32) Random.ChoiceAsync<T>(T[], Int32, CancellationToken) Random.Choice<T>(IEnumerable<T>) Random.Choice<T>(IEnumerable<T>, Int32) Random.ChoiceAsync<T>(IEnumerable<T>, Int32) Random.ChoiceAsync<T>(IEnumerable<T>, Int32, CancellationToken) Random.Sample<T>(T[], Int32) Random.SampleAsync<T>(T[], Int32) Random.SampleAsync<T>(T[], Int32, CancellationToken) Random.Sample<T>(IEnumerable<T>, Int32) Random.SampleAsync<T>(IEnumerable<T>, Int32) Random.SampleAsync<T>(IEnumerable<T>, Int32, CancellationToken) Random.Shuffle<T>(T[]) Random.ShuffleAsync<T>(T[]) Random.ShuffleAsync<T>(T[], CancellationToken) Random.Shuffle<T>(IEnumerable<T>) Random.ShuffleAsync<T>(IEnumerable<T>) Random.ShuffleAsync<T>(IEnumerable<T>, CancellationToken) Random.ShuffleInPlace<T>(T[]) Random.ShuffleInPlaceAsync<T>(T[]) Random.ShuffleInPlaceAsync<T>(T[], CancellationToken) Namespace : Litdex.Security.RNG.PRNG Assembly : Litdex.Security.RNG.dll Syntax public class RomuDuo : Random64, IRNG, IDistribution, ISequence Remarks Source: https://www.romu-random.org/ Constructors | Improve this Doc View Source RomuDuo(UInt64, UInt64) Create an instance of RomuDuo object. Declaration public RomuDuo(ulong seed1 = null, ulong seed2 = null) Parameters Type Name Description System.UInt64 seed1 First RNG seed. System.UInt64 seed2 Second RNG seed. | Improve this Doc View Source RomuDuo(UInt64[]) Create an instance of RomuDuo object. Declaration public RomuDuo(ulong[] seed) Parameters Type Name Description System.UInt64 [] seed RNG seed numbers. Methods | Improve this Doc View Source AlgorithmName() Declaration public override string AlgorithmName() Returns Type Description System.String Overrides Random64.AlgorithmName() | Improve this Doc View Source Finalize() Declaration protected void Finalize() | Improve this Doc View Source Next() Declaration protected override ulong Next() Returns Type Description System.UInt64 Overrides Random64.Next() | Improve this Doc View Source Reseed() Declaration public override void Reseed() Overrides Random.Reseed() | Improve this Doc View Source SetSeed(UInt64, UInt64) Set Litdex.Security.RNG seed manually. Declaration public void SetSeed(ulong seed1, ulong seed2) Parameters Type Name Description System.UInt64 seed1 First RNG seed. System.UInt64 seed2 Second RNG seed. Implements IRNG IDistribution ISequence"
  },
  "api/Litdex.Security.RNG.PRNG.RomuDuoJr.html": {
    "href": "api/Litdex.Security.RNG.PRNG.RomuDuoJr.html",
    "title": "Class RomuDuoJr | Litdex.Security.RNG",
    "keywords": "Class RomuDuoJr Romu random variations, the fastest generator using 64-bit arith., but not suited for huge jobs. Est. capacity = 2^51 bytes. Register pressure = 4. State size = 128 bits. Inheritance System.Object Random Random64 RomuDuo RomuDuoJr Implements IRNG IDistribution ISequence Inherited Members RomuDuo.Reseed() RomuDuo.SetSeed(UInt64, UInt64) Random64._State Random64._Size Random64.SetSeed(UInt64[]) Random64.NextBoolean() Random64.NextByte() Random64.NextBytes(Int32) Random64.NextBytesLittleEndian(Int32) Random64.NextBytesBigEndian(Int32) Random64.Fill(Byte[]) Random64.FillLittleEndian(Byte[]) Random64.FillBigEndian(Byte[]) Random64.NextInt() Random64.NextLong() Random._InitialRoll Random.ToString() Random.NextByte(Byte, Byte) Random.NextInt(UInt32, UInt32) Random.NextLong(UInt64, UInt64) Random.NextDouble() Random.NextDouble(Double, Double) Random._NextGaussian Random.NextGaussian(Double, Double, Boolean) Random.NextGamma(Double, Double) Random.Choice<T>(T[]) Random.Choice<T>(T[], Int32) Random.ChoiceAsync<T>(T[], Int32) Random.ChoiceAsync<T>(T[], Int32, CancellationToken) Random.Choice<T>(IEnumerable<T>) Random.Choice<T>(IEnumerable<T>, Int32) Random.ChoiceAsync<T>(IEnumerable<T>, Int32) Random.ChoiceAsync<T>(IEnumerable<T>, Int32, CancellationToken) Random.Sample<T>(T[], Int32) Random.SampleAsync<T>(T[], Int32) Random.SampleAsync<T>(T[], Int32, CancellationToken) Random.Sample<T>(IEnumerable<T>, Int32) Random.SampleAsync<T>(IEnumerable<T>, Int32) Random.SampleAsync<T>(IEnumerable<T>, Int32, CancellationToken) Random.Shuffle<T>(T[]) Random.ShuffleAsync<T>(T[]) Random.ShuffleAsync<T>(T[], CancellationToken) Random.Shuffle<T>(IEnumerable<T>) Random.ShuffleAsync<T>(IEnumerable<T>) Random.ShuffleAsync<T>(IEnumerable<T>, CancellationToken) Random.ShuffleInPlace<T>(T[]) Random.ShuffleInPlaceAsync<T>(T[]) Random.ShuffleInPlaceAsync<T>(T[], CancellationToken) Namespace : Litdex.Security.RNG.PRNG Assembly : Litdex.Security.RNG.dll Syntax public class RomuDuoJr : RomuDuo, IRNG, IDistribution, ISequence Remarks Source: https://www.romu-random.org/ Constructors | Improve this Doc View Source RomuDuoJr(UInt64, UInt64) Create an instance of RomuDuoJr object. Declaration public RomuDuoJr(ulong seed1 = null, ulong seed2 = null) Parameters Type Name Description System.UInt64 seed1 First RNG seed. System.UInt64 seed2 Second RNG seed. | Improve this Doc View Source RomuDuoJr(UInt64[]) Create an instance of RomuDuoJr object. Declaration public RomuDuoJr(ulong[] seed) Parameters Type Name Description System.UInt64 [] seed RNG seed numbers. Methods | Improve this Doc View Source AlgorithmName() Declaration public override string AlgorithmName() Returns Type Description System.String Overrides RomuDuo.AlgorithmName() | Improve this Doc View Source Finalize() Declaration protected void Finalize() | Improve this Doc View Source Next() Declaration protected override ulong Next() Returns Type Description System.UInt64 Overrides RomuDuo.Next() Implements IRNG IDistribution ISequence"
  },
  "api/Litdex.Security.RNG.PRNG.RomuMono32.html": {
    "href": "api/Litdex.Security.RNG.PRNG.RomuMono32.html",
    "title": "Class RomuMono32 | Litdex.Security.RNG",
    "keywords": "Class RomuMono32 Romu random variations, 32-bit arithmetic: Suitable only up to 2^26 output-values. Outputs 16-bit numbers. Fixed period of (2^32)-47. Must be seeded using the romuMono32_init function. Capacity = 2^27 bytes. Register pressure = 2. State size = 32 bits. Inheritance System.Object Random Random32 RomuMono32 Implements IRNG IDistribution ISequence Inherited Members Random32._State Random32._Size Random32.NextBoolean() Random32.NextByte() Random32.NextBytes(Int32) Random32.NextBytesLittleEndian(Int32) Random32.NextBytesBigEndian(Int32) Random32.Fill(Byte[]) Random32.FillLittleEndian(Byte[]) Random32.FillBigEndian(Byte[]) Random32.NextInt() Random32.NextLong() Random._InitialRoll Random.ToString() Random.NextByte(Byte, Byte) Random.NextInt(UInt32, UInt32) Random.NextLong(UInt64, UInt64) Random.NextDouble() Random.NextDouble(Double, Double) Random._NextGaussian Random.NextGaussian(Double, Double, Boolean) Random.NextGamma(Double, Double) Random.Choice<T>(T[]) Random.Choice<T>(T[], Int32) Random.ChoiceAsync<T>(T[], Int32) Random.ChoiceAsync<T>(T[], Int32, CancellationToken) Random.Choice<T>(IEnumerable<T>) Random.Choice<T>(IEnumerable<T>, Int32) Random.ChoiceAsync<T>(IEnumerable<T>, Int32) Random.ChoiceAsync<T>(IEnumerable<T>, Int32, CancellationToken) Random.Sample<T>(T[], Int32) Random.SampleAsync<T>(T[], Int32) Random.SampleAsync<T>(T[], Int32, CancellationToken) Random.Sample<T>(IEnumerable<T>, Int32) Random.SampleAsync<T>(IEnumerable<T>, Int32) Random.SampleAsync<T>(IEnumerable<T>, Int32, CancellationToken) Random.Shuffle<T>(T[]) Random.ShuffleAsync<T>(T[]) Random.ShuffleAsync<T>(T[], CancellationToken) Random.Shuffle<T>(IEnumerable<T>) Random.ShuffleAsync<T>(IEnumerable<T>) Random.ShuffleAsync<T>(IEnumerable<T>, CancellationToken) Random.ShuffleInPlace<T>(T[]) Random.ShuffleInPlaceAsync<T>(T[]) Random.ShuffleInPlaceAsync<T>(T[], CancellationToken) Namespace : Litdex.Security.RNG.PRNG Assembly : Litdex.Security.RNG.dll Syntax public class RomuMono32 : Random32, IRNG, IDistribution, ISequence Remarks Source: https://www.romu-random.org/ Constructors | Improve this Doc View Source RomuMono32(UInt32) Create an instance of RomuMono32 object. Declaration public RomuMono32(uint seed = null) Parameters Type Name Description System.UInt32 seed RNG seed. Methods | Improve this Doc View Source AlgorithmName() Declaration public override string AlgorithmName() Returns Type Description System.String Overrides Random32.AlgorithmName() | Improve this Doc View Source Finalize() Declaration protected void Finalize() | Improve this Doc View Source Next() Declaration protected override uint Next() Returns Type Description System.UInt32 Overrides Random32.Next() | Improve this Doc View Source Reseed() Declaration public override void Reseed() Overrides Random.Reseed() | Improve this Doc View Source SetSeed(UInt32) Set Litdex.Security.RNG seed manually. Declaration public void SetSeed(uint seed) Parameters Type Name Description System.UInt32 seed RNG seed. | Improve this Doc View Source SetSeed(UInt32[]) Declaration public override void SetSeed(params uint[] seed) Parameters Type Name Description System.UInt32 [] seed Overrides Random32.SetSeed(UInt32[]) Implements IRNG IDistribution ISequence"
  },
  "api/Litdex.Security.RNG.PRNG.RomuQuad.html": {
    "href": "api/Litdex.Security.RNG.PRNG.RomuQuad.html",
    "title": "Class RomuQuad | Litdex.Security.RNG",
    "keywords": "Class RomuQuad Romu random variations, more robust than anyone could need, but uses more registers than RomuTrio. Est. capacity >= 2^90 bytes. Register pressure = 8 (high). State size = 256 bits. Inheritance System.Object Random Random64 RomuQuad Implements IRNG IDistribution ISequence Inherited Members Random64._State Random64._Size Random64.SetSeed(UInt64[]) Random64.NextBoolean() Random64.NextByte() Random64.NextBytes(Int32) Random64.NextBytesLittleEndian(Int32) Random64.NextBytesBigEndian(Int32) Random64.Fill(Byte[]) Random64.FillLittleEndian(Byte[]) Random64.FillBigEndian(Byte[]) Random64.NextInt() Random64.NextLong() Random._InitialRoll Random.ToString() Random.NextByte(Byte, Byte) Random.NextInt(UInt32, UInt32) Random.NextLong(UInt64, UInt64) Random.NextDouble() Random.NextDouble(Double, Double) Random._NextGaussian Random.NextGaussian(Double, Double, Boolean) Random.NextGamma(Double, Double) Random.Choice<T>(T[]) Random.Choice<T>(T[], Int32) Random.ChoiceAsync<T>(T[], Int32) Random.ChoiceAsync<T>(T[], Int32, CancellationToken) Random.Choice<T>(IEnumerable<T>) Random.Choice<T>(IEnumerable<T>, Int32) Random.ChoiceAsync<T>(IEnumerable<T>, Int32) Random.ChoiceAsync<T>(IEnumerable<T>, Int32, CancellationToken) Random.Sample<T>(T[], Int32) Random.SampleAsync<T>(T[], Int32) Random.SampleAsync<T>(T[], Int32, CancellationToken) Random.Sample<T>(IEnumerable<T>, Int32) Random.SampleAsync<T>(IEnumerable<T>, Int32) Random.SampleAsync<T>(IEnumerable<T>, Int32, CancellationToken) Random.Shuffle<T>(T[]) Random.ShuffleAsync<T>(T[]) Random.ShuffleAsync<T>(T[], CancellationToken) Random.Shuffle<T>(IEnumerable<T>) Random.ShuffleAsync<T>(IEnumerable<T>) Random.ShuffleAsync<T>(IEnumerable<T>, CancellationToken) Random.ShuffleInPlace<T>(T[]) Random.ShuffleInPlaceAsync<T>(T[]) Random.ShuffleInPlaceAsync<T>(T[], CancellationToken) Namespace : Litdex.Security.RNG.PRNG Assembly : Litdex.Security.RNG.dll Syntax public class RomuQuad : Random64, IRNG, IDistribution, ISequence Remarks Source: https://www.romu-random.org/ Constructors | Improve this Doc View Source RomuQuad(UInt64, UInt64, UInt64, UInt64) Create an instance of RomuQuad object. Declaration public RomuQuad(ulong seed1 = null, ulong seed2 = null, ulong seed3 = null, ulong seed4 = null) Parameters Type Name Description System.UInt64 seed1 W state. System.UInt64 seed2 X state. System.UInt64 seed3 Y state. System.UInt64 seed4 Z state. | Improve this Doc View Source RomuQuad(UInt64[]) Create an instance of RomuQuad object. Declaration public RomuQuad(ulong[] seed) Parameters Type Name Description System.UInt64 [] seed A array of seed numbers. Methods | Improve this Doc View Source AlgorithmName() Declaration public override string AlgorithmName() Returns Type Description System.String Overrides Random64.AlgorithmName() | Improve this Doc View Source Finalize() Clear all seed. Declaration protected void Finalize() | Improve this Doc View Source Next() Declaration protected override ulong Next() Returns Type Description System.UInt64 Overrides Random64.Next() | Improve this Doc View Source Reseed() Declaration public override void Reseed() Overrides Random.Reseed() | Improve this Doc View Source SetSeed(UInt64, UInt64, UInt64, UInt64) Set Litdex.Security.RNG seed manually. Declaration public void SetSeed(ulong seed1, ulong seed2, ulong seed3, ulong seed4) Parameters Type Name Description System.UInt64 seed1 W state. System.UInt64 seed2 X state. System.UInt64 seed3 Y state. System.UInt64 seed4 Z state. Implements IRNG IDistribution ISequence"
  },
  "api/Litdex.Security.RNG.PRNG.RomuQuad32.html": {
    "href": "api/Litdex.Security.RNG.PRNG.RomuQuad32.html",
    "title": "Class RomuQuad32 | Litdex.Security.RNG",
    "keywords": "Class RomuQuad32 Romu random variations, 32-bit arithmetic: Good for general purpose use. Est. capacity >= 2^62 bytes. Register pressure = 7. State size = 128 bits. Inheritance System.Object Random Random32 RomuQuad32 Implements IRNG IDistribution ISequence Inherited Members Random32._State Random32._Size Random32.SetSeed(UInt32[]) Random32.NextBoolean() Random32.NextByte() Random32.NextBytes(Int32) Random32.NextBytesLittleEndian(Int32) Random32.NextBytesBigEndian(Int32) Random32.Fill(Byte[]) Random32.FillLittleEndian(Byte[]) Random32.FillBigEndian(Byte[]) Random32.NextInt() Random32.NextLong() Random._InitialRoll Random.ToString() Random.NextByte(Byte, Byte) Random.NextInt(UInt32, UInt32) Random.NextLong(UInt64, UInt64) Random.NextDouble() Random.NextDouble(Double, Double) Random._NextGaussian Random.NextGaussian(Double, Double, Boolean) Random.NextGamma(Double, Double) Random.Choice<T>(T[]) Random.Choice<T>(T[], Int32) Random.ChoiceAsync<T>(T[], Int32) Random.ChoiceAsync<T>(T[], Int32, CancellationToken) Random.Choice<T>(IEnumerable<T>) Random.Choice<T>(IEnumerable<T>, Int32) Random.ChoiceAsync<T>(IEnumerable<T>, Int32) Random.ChoiceAsync<T>(IEnumerable<T>, Int32, CancellationToken) Random.Sample<T>(T[], Int32) Random.SampleAsync<T>(T[], Int32) Random.SampleAsync<T>(T[], Int32, CancellationToken) Random.Sample<T>(IEnumerable<T>, Int32) Random.SampleAsync<T>(IEnumerable<T>, Int32) Random.SampleAsync<T>(IEnumerable<T>, Int32, CancellationToken) Random.Shuffle<T>(T[]) Random.ShuffleAsync<T>(T[]) Random.ShuffleAsync<T>(T[], CancellationToken) Random.Shuffle<T>(IEnumerable<T>) Random.ShuffleAsync<T>(IEnumerable<T>) Random.ShuffleAsync<T>(IEnumerable<T>, CancellationToken) Random.ShuffleInPlace<T>(T[]) Random.ShuffleInPlaceAsync<T>(T[]) Random.ShuffleInPlaceAsync<T>(T[], CancellationToken) Namespace : Litdex.Security.RNG.PRNG Assembly : Litdex.Security.RNG.dll Syntax public class RomuQuad32 : Random32, IRNG, IDistribution, ISequence Remarks Source: https://www.romu-random.org/ Constructors | Improve this Doc View Source RomuQuad32(UInt32, UInt32, UInt32, UInt32) Create an instance of RomuQuad32 object. Declaration public RomuQuad32(uint seed1 = null, uint seed2 = null, uint seed3 = null, uint seed4 = null) Parameters Type Name Description System.UInt32 seed1 W state. System.UInt32 seed2 X state. System.UInt32 seed3 Y state. System.UInt32 seed4 Z state. | Improve this Doc View Source RomuQuad32(UInt32[]) Create an instance of RomuQuad object. Declaration public RomuQuad32(uint[] seed) Parameters Type Name Description System.UInt32 [] seed A array of seed numbers. Methods | Improve this Doc View Source AlgorithmName() Declaration public override string AlgorithmName() Returns Type Description System.String Overrides Random32.AlgorithmName() | Improve this Doc View Source Finalize() Clear all seed. Declaration protected void Finalize() | Improve this Doc View Source Next() Declaration protected override uint Next() Returns Type Description System.UInt32 Overrides Random32.Next() | Improve this Doc View Source Reseed() Declaration public override void Reseed() Overrides Random.Reseed() | Improve this Doc View Source SetSeed(UInt32, UInt32, UInt32, UInt32) Set Litdex.Security.RNG seed manually. Declaration public void SetSeed(uint seed1, uint seed2, uint seed3, uint seed4) Parameters Type Name Description System.UInt32 seed1 W state. System.UInt32 seed2 X state. System.UInt32 seed3 Y state. System.UInt32 seed4 Z state. Implements IRNG IDistribution ISequence"
  },
  "api/Litdex.Security.RNG.PRNG.RomuTrio.html": {
    "href": "api/Litdex.Security.RNG.PRNG.RomuTrio.html",
    "title": "Class RomuTrio | Litdex.Security.RNG",
    "keywords": "Class RomuTrio Romu random variations, great for general purpose work, including huge jobs. Est. capacity = 2^75 bytes. Register pressure = 6. State size = 192 bits. Inheritance System.Object Random Random64 RomuTrio Implements IRNG IDistribution ISequence Inherited Members Random64._State Random64._Size Random64.SetSeed(UInt64[]) Random64.NextBoolean() Random64.NextByte() Random64.NextBytes(Int32) Random64.NextBytesLittleEndian(Int32) Random64.NextBytesBigEndian(Int32) Random64.Fill(Byte[]) Random64.FillLittleEndian(Byte[]) Random64.FillBigEndian(Byte[]) Random64.NextInt() Random64.NextLong() Random._InitialRoll Random.ToString() Random.NextByte(Byte, Byte) Random.NextInt(UInt32, UInt32) Random.NextLong(UInt64, UInt64) Random.NextDouble() Random.NextDouble(Double, Double) Random._NextGaussian Random.NextGaussian(Double, Double, Boolean) Random.NextGamma(Double, Double) Random.Choice<T>(T[]) Random.Choice<T>(T[], Int32) Random.ChoiceAsync<T>(T[], Int32) Random.ChoiceAsync<T>(T[], Int32, CancellationToken) Random.Choice<T>(IEnumerable<T>) Random.Choice<T>(IEnumerable<T>, Int32) Random.ChoiceAsync<T>(IEnumerable<T>, Int32) Random.ChoiceAsync<T>(IEnumerable<T>, Int32, CancellationToken) Random.Sample<T>(T[], Int32) Random.SampleAsync<T>(T[], Int32) Random.SampleAsync<T>(T[], Int32, CancellationToken) Random.Sample<T>(IEnumerable<T>, Int32) Random.SampleAsync<T>(IEnumerable<T>, Int32) Random.SampleAsync<T>(IEnumerable<T>, Int32, CancellationToken) Random.Shuffle<T>(T[]) Random.ShuffleAsync<T>(T[]) Random.ShuffleAsync<T>(T[], CancellationToken) Random.Shuffle<T>(IEnumerable<T>) Random.ShuffleAsync<T>(IEnumerable<T>) Random.ShuffleAsync<T>(IEnumerable<T>, CancellationToken) Random.ShuffleInPlace<T>(T[]) Random.ShuffleInPlaceAsync<T>(T[]) Random.ShuffleInPlaceAsync<T>(T[], CancellationToken) Namespace : Litdex.Security.RNG.PRNG Assembly : Litdex.Security.RNG.dll Syntax public class RomuTrio : Random64, IRNG, IDistribution, ISequence Remarks Source: https://www.romu-random.org/ Constructors | Improve this Doc View Source RomuTrio(UInt64, UInt64, UInt64) Create an instance of RomuTrio object. Declaration public RomuTrio(ulong seed1 = null, ulong seed2 = null, ulong seed3 = null) Parameters Type Name Description System.UInt64 seed1 X state. System.UInt64 seed2 Y state. System.UInt64 seed3 Z state. | Improve this Doc View Source RomuTrio(UInt64[]) Create an instance of RomuTrio object. Declaration public RomuTrio(ulong[] seed) Parameters Type Name Description System.UInt64 [] seed A array of seed numbers. Methods | Improve this Doc View Source AlgorithmName() Declaration public override string AlgorithmName() Returns Type Description System.String Overrides Random64.AlgorithmName() | Improve this Doc View Source Finalize() Clear all seed. Declaration protected void Finalize() | Improve this Doc View Source Next() Declaration protected override ulong Next() Returns Type Description System.UInt64 Overrides Random64.Next() | Improve this Doc View Source Reseed() Declaration public override void Reseed() Overrides Random.Reseed() | Improve this Doc View Source SetSeed(UInt64, UInt64, UInt64) Set Litdex.Security.RNG seed manually. Declaration public void SetSeed(ulong seed1, ulong seed2, ulong seed3) Parameters Type Name Description System.UInt64 seed1 X state. System.UInt64 seed2 Y state. System.UInt64 seed3 Z state. Implements IRNG IDistribution ISequence"
  },
  "api/Litdex.Security.RNG.PRNG.RomuTrio32.html": {
    "href": "api/Litdex.Security.RNG.PRNG.RomuTrio32.html",
    "title": "Class RomuTrio32 | Litdex.Security.RNG",
    "keywords": "Class RomuTrio32 Romu random variations, 32-bit arithmetic: Good for general purpose use, except for huge jobs. Est. capacity >= 2^53 bytes. Register pressure = 5. State size = 96 bits. Inheritance System.Object Random Random32 RomuTrio32 Implements IRNG IDistribution ISequence Inherited Members Random32._State Random32._Size Random32.SetSeed(UInt32[]) Random32.NextBoolean() Random32.NextByte() Random32.NextBytes(Int32) Random32.NextBytesLittleEndian(Int32) Random32.NextBytesBigEndian(Int32) Random32.Fill(Byte[]) Random32.FillLittleEndian(Byte[]) Random32.FillBigEndian(Byte[]) Random32.NextInt() Random32.NextLong() Random._InitialRoll Random.ToString() Random.NextByte(Byte, Byte) Random.NextInt(UInt32, UInt32) Random.NextLong(UInt64, UInt64) Random.NextDouble() Random.NextDouble(Double, Double) Random._NextGaussian Random.NextGaussian(Double, Double, Boolean) Random.NextGamma(Double, Double) Random.Choice<T>(T[]) Random.Choice<T>(T[], Int32) Random.ChoiceAsync<T>(T[], Int32) Random.ChoiceAsync<T>(T[], Int32, CancellationToken) Random.Choice<T>(IEnumerable<T>) Random.Choice<T>(IEnumerable<T>, Int32) Random.ChoiceAsync<T>(IEnumerable<T>, Int32) Random.ChoiceAsync<T>(IEnumerable<T>, Int32, CancellationToken) Random.Sample<T>(T[], Int32) Random.SampleAsync<T>(T[], Int32) Random.SampleAsync<T>(T[], Int32, CancellationToken) Random.Sample<T>(IEnumerable<T>, Int32) Random.SampleAsync<T>(IEnumerable<T>, Int32) Random.SampleAsync<T>(IEnumerable<T>, Int32, CancellationToken) Random.Shuffle<T>(T[]) Random.ShuffleAsync<T>(T[]) Random.ShuffleAsync<T>(T[], CancellationToken) Random.Shuffle<T>(IEnumerable<T>) Random.ShuffleAsync<T>(IEnumerable<T>) Random.ShuffleAsync<T>(IEnumerable<T>, CancellationToken) Random.ShuffleInPlace<T>(T[]) Random.ShuffleInPlaceAsync<T>(T[]) Random.ShuffleInPlaceAsync<T>(T[], CancellationToken) Namespace : Litdex.Security.RNG.PRNG Assembly : Litdex.Security.RNG.dll Syntax public class RomuTrio32 : Random32, IRNG, IDistribution, ISequence Remarks Source: https://www.romu-random.org/ Constructors | Improve this Doc View Source RomuTrio32(UInt32, UInt32, UInt32) Create an instance of RomuTrio32 object. Declaration public RomuTrio32(uint seed1 = null, uint seed2 = null, uint seed3 = null) Parameters Type Name Description System.UInt32 seed1 X state. System.UInt32 seed2 Y state. System.UInt32 seed3 Z state. | Improve this Doc View Source RomuTrio32(UInt32[]) Create an instance of RomuTrio32 object. Declaration public RomuTrio32(uint[] seed) Parameters Type Name Description System.UInt32 [] seed A array of seed numbers. Methods | Improve this Doc View Source AlgorithmName() Declaration public override string AlgorithmName() Returns Type Description System.String Overrides Random32.AlgorithmName() | Improve this Doc View Source Next() Declaration protected override uint Next() Returns Type Description System.UInt32 Overrides Random32.Next() | Improve this Doc View Source Reseed() Declaration public override void Reseed() Overrides Random.Reseed() | Improve this Doc View Source SetSeed(UInt32, UInt32, UInt32) Set Litdex.Security.RNG seed manually. Declaration public void SetSeed(uint seed1, uint seed2, uint seed3) Parameters Type Name Description System.UInt32 seed1 X state. System.UInt32 seed2 Y state. System.UInt32 seed3 Z state. Implements IRNG IDistribution ISequence"
  },
  "api/Litdex.Security.RNG.PRNG.Seiran.html": {
    "href": "api/Litdex.Security.RNG.PRNG.Seiran.html",
    "title": "Class Seiran | Litdex.Security.RNG",
    "keywords": "Class Seiran LFSR-based pseudorandom number generators. Inheritance System.Object Random Random64 Seiran Implements IRNG IDistribution ISequence Inherited Members Random64._State Random64._Size Random64.SetSeed(UInt64[]) Random64.NextBoolean() Random64.NextByte() Random64.NextBytes(Int32) Random64.NextBytesLittleEndian(Int32) Random64.NextBytesBigEndian(Int32) Random64.Fill(Byte[]) Random64.FillLittleEndian(Byte[]) Random64.FillBigEndian(Byte[]) Random64.NextInt() Random64.NextLong() Random._InitialRoll Random.ToString() Random.NextByte(Byte, Byte) Random.NextInt(UInt32, UInt32) Random.NextLong(UInt64, UInt64) Random.NextDouble() Random.NextDouble(Double, Double) Random._NextGaussian Random.NextGaussian(Double, Double, Boolean) Random.NextGamma(Double, Double) Random.Choice<T>(T[]) Random.Choice<T>(T[], Int32) Random.ChoiceAsync<T>(T[], Int32) Random.ChoiceAsync<T>(T[], Int32, CancellationToken) Random.Choice<T>(IEnumerable<T>) Random.Choice<T>(IEnumerable<T>, Int32) Random.ChoiceAsync<T>(IEnumerable<T>, Int32) Random.ChoiceAsync<T>(IEnumerable<T>, Int32, CancellationToken) Random.Sample<T>(T[], Int32) Random.SampleAsync<T>(T[], Int32) Random.SampleAsync<T>(T[], Int32, CancellationToken) Random.Sample<T>(IEnumerable<T>, Int32) Random.SampleAsync<T>(IEnumerable<T>, Int32) Random.SampleAsync<T>(IEnumerable<T>, Int32, CancellationToken) Random.Shuffle<T>(T[]) Random.ShuffleAsync<T>(T[]) Random.ShuffleAsync<T>(T[], CancellationToken) Random.Shuffle<T>(IEnumerable<T>) Random.ShuffleAsync<T>(IEnumerable<T>) Random.ShuffleAsync<T>(IEnumerable<T>, CancellationToken) Random.ShuffleInPlace<T>(T[]) Random.ShuffleInPlaceAsync<T>(T[]) Random.ShuffleInPlaceAsync<T>(T[], CancellationToken) Namespace : Litdex.Security.RNG.PRNG Assembly : Litdex.Security.RNG.dll Syntax public class Seiran : Random64, IRNG, IDistribution, ISequence Remarks Source: https://github.com/andanteyk/prng-seiran Constructors | Improve this Doc View Source Seiran() Create an instance of Seiran object. Declaration public Seiran() | Improve this Doc View Source Seiran(UInt64[]) Create an instance of Seiran object. Declaration public Seiran(ulong[] seed) Parameters Type Name Description System.UInt64 [] seed RNG seed numbers. Methods | Improve this Doc View Source AlgorithmName() Declaration public override string AlgorithmName() Returns Type Description System.String Overrides Random64.AlgorithmName() | Improve this Doc View Source Finalize() Declaration protected void Finalize() | Improve this Doc View Source Jump32() Advance the internal state by 2^32 steps. Declaration public void Jump32() Remarks This method is equivalent to 2^32 Next() calls. It can be executed in the same amount of time as 128 Next() calls. | Improve this Doc View Source Jump64() Advance the internal state by 2^64 steps. Declaration public void Jump64() Remarks This method is equivalent to 2^64 Next() calls. It can be executed in the same amount of time as 128 Next() calls. | Improve this Doc View Source Jump96() Advance the internal state by 2^96 steps. Declaration public void Jump96() Remarks This method is equivalent to 2^96 Next() calls. It can be executed in the same amount of time as 128 Next() calls. | Improve this Doc View Source Next() Declaration protected override ulong Next() Returns Type Description System.UInt64 Overrides Random64.Next() | Improve this Doc View Source Previous() Rewinds the internal state to the previous state. Declaration public void Previous() | Improve this Doc View Source Reseed() Declaration public override void Reseed() Overrides Random.Reseed() | Improve this Doc View Source SetSeed(UInt64, UInt64) Set Litdex.Security.RNG seed manually. Declaration public void SetSeed(ulong seed1, ulong seed2) Parameters Type Name Description System.UInt64 seed1 First RNG seed. System.UInt64 seed2 Second RNG seed. Implements IRNG IDistribution ISequence"
  },
  "api/Litdex.Security.RNG.PRNG.SFC32.html": {
    "href": "api/Litdex.Security.RNG.PRNG.SFC32.html",
    "title": "Class SFC32 | Litdex.Security.RNG",
    "keywords": "Class SFC32 Implementation of Small, Fast, Counting (SFC) 32-bit generator of Chris Doty-Humphrey. The original source is the PractRand test suite Inheritance System.Object Random Random32 SFC32 Implements IRNG IDistribution ISequence Inherited Members Random32._State Random32._Size Random32.NextBoolean() Random32.NextByte() Random32.NextBytes(Int32) Random32.NextBytesLittleEndian(Int32) Random32.NextBytesBigEndian(Int32) Random32.Fill(Byte[]) Random32.FillLittleEndian(Byte[]) Random32.FillBigEndian(Byte[]) Random32.NextInt() Random32.NextLong() Random._InitialRoll Random.ToString() Random.NextByte(Byte, Byte) Random.NextInt(UInt32, UInt32) Random.NextLong(UInt64, UInt64) Random.NextDouble() Random.NextDouble(Double, Double) Random._NextGaussian Random.NextGaussian(Double, Double, Boolean) Random.NextGamma(Double, Double) Random.Choice<T>(T[]) Random.Choice<T>(T[], Int32) Random.ChoiceAsync<T>(T[], Int32) Random.ChoiceAsync<T>(T[], Int32, CancellationToken) Random.Choice<T>(IEnumerable<T>) Random.Choice<T>(IEnumerable<T>, Int32) Random.ChoiceAsync<T>(IEnumerable<T>, Int32) Random.ChoiceAsync<T>(IEnumerable<T>, Int32, CancellationToken) Random.Sample<T>(T[], Int32) Random.SampleAsync<T>(T[], Int32) Random.SampleAsync<T>(T[], Int32, CancellationToken) Random.Sample<T>(IEnumerable<T>, Int32) Random.SampleAsync<T>(IEnumerable<T>, Int32) Random.SampleAsync<T>(IEnumerable<T>, Int32, CancellationToken) Random.Shuffle<T>(T[]) Random.ShuffleAsync<T>(T[]) Random.ShuffleAsync<T>(T[], CancellationToken) Random.Shuffle<T>(IEnumerable<T>) Random.ShuffleAsync<T>(IEnumerable<T>) Random.ShuffleAsync<T>(IEnumerable<T>, CancellationToken) Random.ShuffleInPlace<T>(T[]) Random.ShuffleInPlaceAsync<T>(T[]) Random.ShuffleInPlaceAsync<T>(T[], CancellationToken) Namespace : Litdex.Security.RNG.PRNG Assembly : Litdex.Security.RNG.dll Syntax public class SFC32 : Random32, IRNG, IDistribution, ISequence Remarks Source: http://pracrand.sourceforge.net/ https://github.com/bashtage/randomgen/blob/main/randomgen/src/sfc/ Constructors | Improve this Doc View Source SFC32(UInt32, UInt32, UInt32, UInt32) Create an instance of SFC64 object. Declaration public SFC32(uint seed1 = null, uint seed2 = null, uint seed3 = null, uint counter = null) Parameters Type Name Description System.UInt32 seed1 First seed. System.UInt32 seed2 Second seed. System.UInt32 seed3 Third seed. System.UInt32 counter Counter number. Methods | Improve this Doc View Source AlgorithmName() Declaration public override string AlgorithmName() Returns Type Description System.String Overrides Random32.AlgorithmName() | Improve this Doc View Source Finalize() Destructor. Declaration protected void Finalize() | Improve this Doc View Source Next() Declaration protected override uint Next() Returns Type Description System.UInt32 Overrides Random32.Next() | Improve this Doc View Source Reseed() Declaration public override void Reseed() Overrides Random.Reseed() | Improve this Doc View Source SetSeed(UInt32, UInt32, UInt32, UInt32) Set Litdex.Security.RNG seed manually. Declaration public void SetSeed(uint seed1 = null, uint seed2 = null, uint seed3 = null, uint counter = null) Parameters Type Name Description System.UInt32 seed1 First seed. System.UInt32 seed2 Second seed. System.UInt32 seed3 Third seed. System.UInt32 counter Counter number. | Improve this Doc View Source SetSeed(UInt32[]) Declaration public override void SetSeed(params uint[] seed) Parameters Type Name Description System.UInt32 [] seed Overrides Random32.SetSeed(UInt32[]) | Improve this Doc View Source SetSeed(UInt32[], UInt32) Set Litdex.Security.RNG seed manually. Declaration public void SetSeed(uint[] seed, uint counter = null) Parameters Type Name Description System.UInt32 [] seed RNG seed. System.UInt32 counter Counter number. Implements IRNG IDistribution ISequence"
  },
  "api/Litdex.Security.RNG.PRNG.SFC64.html": {
    "href": "api/Litdex.Security.RNG.PRNG.SFC64.html",
    "title": "Class SFC64 | Litdex.Security.RNG",
    "keywords": "Class SFC64 Implementation of Small, Fast, Counting (SFC) 64-bit generator of Chris Doty-Humphrey. The original source is the PractRand test suite Inheritance System.Object Random Random64 SFC64 Implements IRNG IDistribution ISequence Inherited Members Random64._State Random64._Size Random64.NextBoolean() Random64.NextByte() Random64.NextBytes(Int32) Random64.NextBytesLittleEndian(Int32) Random64.NextBytesBigEndian(Int32) Random64.Fill(Byte[]) Random64.FillLittleEndian(Byte[]) Random64.FillBigEndian(Byte[]) Random64.NextInt() Random64.NextLong() Random._InitialRoll Random.ToString() Random.NextByte(Byte, Byte) Random.NextInt(UInt32, UInt32) Random.NextLong(UInt64, UInt64) Random.NextDouble() Random.NextDouble(Double, Double) Random._NextGaussian Random.NextGaussian(Double, Double, Boolean) Random.NextGamma(Double, Double) Random.Choice<T>(T[]) Random.Choice<T>(T[], Int32) Random.ChoiceAsync<T>(T[], Int32) Random.ChoiceAsync<T>(T[], Int32, CancellationToken) Random.Choice<T>(IEnumerable<T>) Random.Choice<T>(IEnumerable<T>, Int32) Random.ChoiceAsync<T>(IEnumerable<T>, Int32) Random.ChoiceAsync<T>(IEnumerable<T>, Int32, CancellationToken) Random.Sample<T>(T[], Int32) Random.SampleAsync<T>(T[], Int32) Random.SampleAsync<T>(T[], Int32, CancellationToken) Random.Sample<T>(IEnumerable<T>, Int32) Random.SampleAsync<T>(IEnumerable<T>, Int32) Random.SampleAsync<T>(IEnumerable<T>, Int32, CancellationToken) Random.Shuffle<T>(T[]) Random.ShuffleAsync<T>(T[]) Random.ShuffleAsync<T>(T[], CancellationToken) Random.Shuffle<T>(IEnumerable<T>) Random.ShuffleAsync<T>(IEnumerable<T>) Random.ShuffleAsync<T>(IEnumerable<T>, CancellationToken) Random.ShuffleInPlace<T>(T[]) Random.ShuffleInPlaceAsync<T>(T[]) Random.ShuffleInPlaceAsync<T>(T[], CancellationToken) Namespace : Litdex.Security.RNG.PRNG Assembly : Litdex.Security.RNG.dll Syntax public class SFC64 : Random64, IRNG, IDistribution, ISequence Remarks Source: http://pracrand.sourceforge.net/ https://github.com/bashtage/randomgen/blob/main/randomgen/src/sfc/ Constructors | Improve this Doc View Source SFC64(UInt64, UInt64, UInt64, UInt64) Create an instance of SFC64 object. Declaration public SFC64(ulong seed1 = null, ulong seed2 = null, ulong seed3 = null, ulong counter = null) Parameters Type Name Description System.UInt64 seed1 First seed. System.UInt64 seed2 Second seed. System.UInt64 seed3 Third seed. System.UInt64 counter Counter number. Methods | Improve this Doc View Source AlgorithmName() Declaration public override string AlgorithmName() Returns Type Description System.String Overrides Random64.AlgorithmName() | Improve this Doc View Source Finalize() Destructor. Declaration protected void Finalize() | Improve this Doc View Source Next() Declaration protected override ulong Next() Returns Type Description System.UInt64 Overrides Random64.Next() | Improve this Doc View Source Reseed() Declaration public override void Reseed() Overrides Random.Reseed() | Improve this Doc View Source SetSeed(UInt64, UInt64, UInt64, UInt64) Set Litdex.Security.RNG seed manually. Declaration public void SetSeed(ulong seed1 = null, ulong seed2 = null, ulong seed3 = null, ulong counter = null) Parameters Type Name Description System.UInt64 seed1 First seed. System.UInt64 seed2 Second seed. System.UInt64 seed3 Third seed. System.UInt64 counter Counter number. | Improve this Doc View Source SetSeed(UInt64[]) Declaration public override void SetSeed(params ulong[] seed) Parameters Type Name Description System.UInt64 [] seed Overrides Random64.SetSeed(UInt64[]) | Improve this Doc View Source SetSeed(UInt64[], UInt64) Set Litdex.Security.RNG seed manually. Declaration public void SetSeed(ulong[] seed, ulong counter = null) Parameters Type Name Description System.UInt64 [] seed RNG seed. System.UInt64 counter Counter number. Implements IRNG IDistribution ISequence"
  },
  "api/Litdex.Security.RNG.PRNG.Shioi.html": {
    "href": "api/Litdex.Security.RNG.PRNG.Shioi.html",
    "title": "Class Shioi | Litdex.Security.RNG",
    "keywords": "Class Shioi LFSR-based pseudorandom number generators. It have interesting jump characteristics. Inheritance System.Object Random Random64 Shioi Implements IRNG IDistribution ISequence Inherited Members Random64._State Random64._Size Random64.SetSeed(UInt64[]) Random64.NextBoolean() Random64.NextByte() Random64.NextBytes(Int32) Random64.NextBytesLittleEndian(Int32) Random64.NextBytesBigEndian(Int32) Random64.Fill(Byte[]) Random64.FillLittleEndian(Byte[]) Random64.FillBigEndian(Byte[]) Random64.NextInt() Random64.NextLong() Random._InitialRoll Random.ToString() Random.NextByte(Byte, Byte) Random.NextInt(UInt32, UInt32) Random.NextLong(UInt64, UInt64) Random.NextDouble() Random.NextDouble(Double, Double) Random._NextGaussian Random.NextGaussian(Double, Double, Boolean) Random.NextGamma(Double, Double) Random.Choice<T>(T[]) Random.Choice<T>(T[], Int32) Random.ChoiceAsync<T>(T[], Int32) Random.ChoiceAsync<T>(T[], Int32, CancellationToken) Random.Choice<T>(IEnumerable<T>) Random.Choice<T>(IEnumerable<T>, Int32) Random.ChoiceAsync<T>(IEnumerable<T>, Int32) Random.ChoiceAsync<T>(IEnumerable<T>, Int32, CancellationToken) Random.Sample<T>(T[], Int32) Random.SampleAsync<T>(T[], Int32) Random.SampleAsync<T>(T[], Int32, CancellationToken) Random.Sample<T>(IEnumerable<T>, Int32) Random.SampleAsync<T>(IEnumerable<T>, Int32) Random.SampleAsync<T>(IEnumerable<T>, Int32, CancellationToken) Random.Shuffle<T>(T[]) Random.ShuffleAsync<T>(T[]) Random.ShuffleAsync<T>(T[], CancellationToken) Random.Shuffle<T>(IEnumerable<T>) Random.ShuffleAsync<T>(IEnumerable<T>) Random.ShuffleAsync<T>(IEnumerable<T>, CancellationToken) Random.ShuffleInPlace<T>(T[]) Random.ShuffleInPlaceAsync<T>(T[]) Random.ShuffleInPlaceAsync<T>(T[], CancellationToken) Namespace : Litdex.Security.RNG.PRNG Assembly : Litdex.Security.RNG.dll Syntax public class Shioi : Random64, IRNG, IDistribution, ISequence Remarks Source: https://github.com/andanteyk/prng-shioi Constructors | Improve this Doc View Source Shioi() Create an instance of Shioi object. Declaration public Shioi() | Improve this Doc View Source Shioi(UInt64[]) Create an instance of Shioi object. Declaration public Shioi(ulong[] seed) Parameters Type Name Description System.UInt64 [] seed RNG seed numbers. Methods | Improve this Doc View Source AlgorithmName() Declaration public override string AlgorithmName() Returns Type Description System.String Overrides Random64.AlgorithmName() | Improve this Doc View Source Finalize() Declaration protected void Finalize() | Improve this Doc View Source Jump32() Advance the internal state by 2^32 steps. Declaration public void Jump32() Remarks This method is equivalent to 2^32 Next() calls. It can be executed in the same amount of time as 128 Next() calls. | Improve this Doc View Source Jump64() Advance the internal state by 2^64 steps. Declaration public void Jump64() Remarks This method is equivalent to 2^64 Next() calls. It can be executed in the same amount of time as 128 Next() calls. | Improve this Doc View Source Jump96() Advance the internal state by 2^96 steps. Declaration public void Jump96() Remarks This method is equivalent to 2^96 Next() calls. It can be executed in the same amount of time as 128 Next() calls. | Improve this Doc View Source Next() Declaration protected override ulong Next() Returns Type Description System.UInt64 Overrides Random64.Next() | Improve this Doc View Source Reseed() Declaration public override void Reseed() Overrides Random.Reseed() | Improve this Doc View Source SetSeed(UInt64, UInt64) Set Litdex.Security.RNG seed manually. Declaration public void SetSeed(ulong seed1, ulong seed2) Parameters Type Name Description System.UInt64 seed1 First RNG seed. System.UInt64 seed2 Second RNG seed. Implements IRNG IDistribution ISequence"
  },
  "api/Litdex.Security.RNG.PRNG.Shishua.html": {
    "href": "api/Litdex.Security.RNG.PRNG.Shishua.html",
    "title": "Class Shishua | Litdex.Security.RNG",
    "keywords": "Class Shishua Shift, Shuffle, Add PRNG. Inheritance System.Object Random Random64 Shishua Implements IRNG IDistribution ISequence Inherited Members Random64._State Random64._Size Random64.NextBoolean() Random64.NextByte() Random64.NextBytes(Int32) Random64.NextBytesLittleEndian(Int32) Random64.NextBytesBigEndian(Int32) Random64.Fill(Byte[]) Random64.FillLittleEndian(Byte[]) Random64.FillBigEndian(Byte[]) Random64.NextInt() Random64.NextLong() Random._InitialRoll Random.ToString() Random.NextByte(Byte, Byte) Random.NextInt(UInt32, UInt32) Random.NextLong(UInt64, UInt64) Random.NextDouble() Random.NextDouble(Double, Double) Random._NextGaussian Random.NextGaussian(Double, Double, Boolean) Random.NextGamma(Double, Double) Random.Choice<T>(T[]) Random.Choice<T>(T[], Int32) Random.ChoiceAsync<T>(T[], Int32) Random.ChoiceAsync<T>(T[], Int32, CancellationToken) Random.Choice<T>(IEnumerable<T>) Random.Choice<T>(IEnumerable<T>, Int32) Random.ChoiceAsync<T>(IEnumerable<T>, Int32) Random.ChoiceAsync<T>(IEnumerable<T>, Int32, CancellationToken) Random.Sample<T>(T[], Int32) Random.SampleAsync<T>(T[], Int32) Random.SampleAsync<T>(T[], Int32, CancellationToken) Random.Sample<T>(IEnumerable<T>, Int32) Random.SampleAsync<T>(IEnumerable<T>, Int32) Random.SampleAsync<T>(IEnumerable<T>, Int32, CancellationToken) Random.Shuffle<T>(T[]) Random.ShuffleAsync<T>(T[]) Random.ShuffleAsync<T>(T[], CancellationToken) Random.Shuffle<T>(IEnumerable<T>) Random.ShuffleAsync<T>(IEnumerable<T>) Random.ShuffleAsync<T>(IEnumerable<T>, CancellationToken) Random.ShuffleInPlace<T>(T[]) Random.ShuffleInPlaceAsync<T>(T[]) Random.ShuffleInPlaceAsync<T>(T[], CancellationToken) Namespace : Litdex.Security.RNG.PRNG Assembly : Litdex.Security.RNG.dll Syntax public class Shishua : Random64, IRNG, IDistribution, ISequence Remarks Still in experimental. Use with your own risk. https://github.com/espadrine/shishua Constructors | Improve this Doc View Source Shishua(UInt64[]) Create an instance of Shishua object. Declaration public Shishua(ulong[] seed = null) Parameters Type Name Description System.UInt64 [] seed W state. Methods | Improve this Doc View Source AlgorithmName() Declaration public override string AlgorithmName() Returns Type Description System.String Overrides Random64.AlgorithmName() | Improve this Doc View Source Finalize() Declaration protected void Finalize() | Improve this Doc View Source Mix(Int32) Mix the internal state. Declaration protected void Mix(int size) Parameters Type Name Description System.Int32 size | Improve this Doc View Source Next() Declaration protected override ulong Next() Returns Type Description System.UInt64 Overrides Random64.Next() | Improve this Doc View Source Reseed() Declaration public override void Reseed() Overrides Random.Reseed() | Improve this Doc View Source SetSeed(UInt64[]) Declaration public override void SetSeed(params ulong[] seed) Parameters Type Name Description System.UInt64 [] seed Overrides Random64.SetSeed(UInt64[]) Implements IRNG IDistribution ISequence"
  },
  "api/Litdex.Security.RNG.PRNG.SplitMix64.html": {
    "href": "api/Litdex.Security.RNG.PRNG.SplitMix64.html",
    "title": "Class SplitMix64 | Litdex.Security.RNG",
    "keywords": "Class SplitMix64 SplitMix64 PRNG Algorithm. Inheritance System.Object Random Random64 SplitMix64 Implements IRNG IDistribution ISequence Inherited Members Random64._State Random64._Size Random64.SetSeed(UInt64[]) Random64.NextBoolean() Random64.NextByte() Random64.NextBytes(Int32) Random64.NextBytesLittleEndian(Int32) Random64.NextBytesBigEndian(Int32) Random64.Fill(Byte[]) Random64.FillLittleEndian(Byte[]) Random64.FillBigEndian(Byte[]) Random64.NextInt() Random64.NextLong() Random._InitialRoll Random.ToString() Random.NextByte(Byte, Byte) Random.NextInt(UInt32, UInt32) Random.NextLong(UInt64, UInt64) Random.NextDouble() Random.NextDouble(Double, Double) Random._NextGaussian Random.NextGaussian(Double, Double, Boolean) Random.NextGamma(Double, Double) Random.Choice<T>(T[]) Random.Choice<T>(T[], Int32) Random.ChoiceAsync<T>(T[], Int32) Random.ChoiceAsync<T>(T[], Int32, CancellationToken) Random.Choice<T>(IEnumerable<T>) Random.Choice<T>(IEnumerable<T>, Int32) Random.ChoiceAsync<T>(IEnumerable<T>, Int32) Random.ChoiceAsync<T>(IEnumerable<T>, Int32, CancellationToken) Random.Sample<T>(T[], Int32) Random.SampleAsync<T>(T[], Int32) Random.SampleAsync<T>(T[], Int32, CancellationToken) Random.Sample<T>(IEnumerable<T>, Int32) Random.SampleAsync<T>(IEnumerable<T>, Int32) Random.SampleAsync<T>(IEnumerable<T>, Int32, CancellationToken) Random.Shuffle<T>(T[]) Random.ShuffleAsync<T>(T[]) Random.ShuffleAsync<T>(T[], CancellationToken) Random.Shuffle<T>(IEnumerable<T>) Random.ShuffleAsync<T>(IEnumerable<T>) Random.ShuffleAsync<T>(IEnumerable<T>, CancellationToken) Random.ShuffleInPlace<T>(T[]) Random.ShuffleInPlaceAsync<T>(T[]) Random.ShuffleInPlaceAsync<T>(T[], CancellationToken) Namespace : Litdex.Security.RNG.PRNG Assembly : Litdex.Security.RNG.dll Syntax public class SplitMix64 : Random64, IRNG, IDistribution, ISequence Constructors | Improve this Doc View Source SplitMix64(UInt64) Create an instance of SplitMix64 object. Declaration public SplitMix64(ulong seed = null) Parameters Type Name Description System.UInt64 seed RNG seed. Methods | Improve this Doc View Source AlgorithmName() Declaration public override string AlgorithmName() Returns Type Description System.String Overrides Random64.AlgorithmName() | Improve this Doc View Source Finalize() Destructor. Declaration protected void Finalize() | Improve this Doc View Source Next() Declaration protected override ulong Next() Returns Type Description System.UInt64 Overrides Random64.Next() | Improve this Doc View Source Reseed() Declaration public override void Reseed() Overrides Random.Reseed() | Improve this Doc View Source SetSeed(UInt64) Set Litdex.Security.RNG seed manually. Declaration public void SetSeed(ulong seed) Parameters Type Name Description System.UInt64 seed RNG seed. Implements IRNG IDistribution ISequence"
  },
  "api/Litdex.Security.RNG.PRNG.Squares.html": {
    "href": "api/Litdex.Security.RNG.PRNG.Squares.html",
    "title": "Class Squares | Litdex.Security.RNG",
    "keywords": "Class Squares Counter-based RNG based on MiddleSquareWeylSequence . Inheritance System.Object Random Random32 Squares Implements IRNG IDistribution ISequence Inherited Members Random32._State Random32._Size Random32.SetSeed(UInt32[]) Random32.NextBoolean() Random32.NextByte() Random32.NextBytes(Int32) Random32.NextBytesLittleEndian(Int32) Random32.NextBytesBigEndian(Int32) Random32.Fill(Byte[]) Random32.FillLittleEndian(Byte[]) Random32.FillBigEndian(Byte[]) Random32.NextInt() Random32.NextLong() Random._InitialRoll Random.ToString() Random.NextByte(Byte, Byte) Random.NextInt(UInt32, UInt32) Random.NextLong(UInt64, UInt64) Random.NextDouble() Random.NextDouble(Double, Double) Random._NextGaussian Random.NextGaussian(Double, Double, Boolean) Random.NextGamma(Double, Double) Random.Choice<T>(T[]) Random.Choice<T>(T[], Int32) Random.ChoiceAsync<T>(T[], Int32) Random.ChoiceAsync<T>(T[], Int32, CancellationToken) Random.Choice<T>(IEnumerable<T>) Random.Choice<T>(IEnumerable<T>, Int32) Random.ChoiceAsync<T>(IEnumerable<T>, Int32) Random.ChoiceAsync<T>(IEnumerable<T>, Int32, CancellationToken) Random.Sample<T>(T[], Int32) Random.SampleAsync<T>(T[], Int32) Random.SampleAsync<T>(T[], Int32, CancellationToken) Random.Sample<T>(IEnumerable<T>, Int32) Random.SampleAsync<T>(IEnumerable<T>, Int32) Random.SampleAsync<T>(IEnumerable<T>, Int32, CancellationToken) Random.Shuffle<T>(T[]) Random.ShuffleAsync<T>(T[]) Random.ShuffleAsync<T>(T[], CancellationToken) Random.Shuffle<T>(IEnumerable<T>) Random.ShuffleAsync<T>(IEnumerable<T>) Random.ShuffleAsync<T>(IEnumerable<T>, CancellationToken) Random.ShuffleInPlace<T>(T[]) Random.ShuffleInPlaceAsync<T>(T[]) Random.ShuffleInPlaceAsync<T>(T[], CancellationToken) Namespace : Litdex.Security.RNG.PRNG Assembly : Litdex.Security.RNG.dll Syntax public class Squares : Random32, IRNG, IDistribution, ISequence Remarks Source: https://arxiv.org/pdf/2004.06278.pdf Constructors | Improve this Doc View Source Squares(UInt64, UInt64) Create an instance of Squares object. Declaration public Squares(ulong ctr = null, ulong key = null) Parameters Type Name Description System.UInt64 ctr Counter start number. System.UInt64 key RNG seed. Methods | Improve this Doc View Source AlgorithmName() Declaration public override string AlgorithmName() Returns Type Description System.String Overrides Random32.AlgorithmName() | Improve this Doc View Source Finalize() Declaration protected void Finalize() | Improve this Doc View Source Next() Declaration protected override uint Next() Returns Type Description System.UInt32 Overrides Random32.Next() | Improve this Doc View Source Next(UInt64, UInt64) Generate next random number. Declaration protected uint Next(ulong ctr, ulong key) Parameters Type Name Description System.UInt64 ctr Counter-based number. System.UInt64 key RNG seed. Returns Type Description System.UInt32 | Improve this Doc View Source Reseed() Declaration public override void Reseed() Overrides Random.Reseed() | Improve this Doc View Source SetSeed(UInt64, UInt64) Set Litdex.Security.RNG seed manually. Declaration public void SetSeed(ulong ctr, ulong key) Parameters Type Name Description System.UInt64 ctr Counter-based number. System.UInt64 key RNG seed. Implements IRNG IDistribution ISequence"
  },
  "api/Litdex.Security.RNG.PRNG.Tyche.html": {
    "href": "api/Litdex.Security.RNG.PRNG.Tyche.html",
    "title": "Class Tyche | Litdex.Security.RNG",
    "keywords": "Class Tyche Tyche is based on ChaCha's quarter-round. Inheritance System.Object Random Random32 Tyche Tychei Implements IRNG IDistribution ISequence Inherited Members Random32._State Random32._Size Random32.NextBoolean() Random32.NextByte() Random32.NextBytes(Int32) Random32.NextBytesLittleEndian(Int32) Random32.NextBytesBigEndian(Int32) Random32.Fill(Byte[]) Random32.FillLittleEndian(Byte[]) Random32.FillBigEndian(Byte[]) Random32.NextInt() Random32.NextLong() Random._InitialRoll Random.ToString() Random.NextByte(Byte, Byte) Random.NextInt(UInt32, UInt32) Random.NextLong(UInt64, UInt64) Random.NextDouble() Random.NextDouble(Double, Double) Random._NextGaussian Random.NextGaussian(Double, Double, Boolean) Random.NextGamma(Double, Double) Random.Choice<T>(T[]) Random.Choice<T>(T[], Int32) Random.ChoiceAsync<T>(T[], Int32) Random.ChoiceAsync<T>(T[], Int32, CancellationToken) Random.Choice<T>(IEnumerable<T>) Random.Choice<T>(IEnumerable<T>, Int32) Random.ChoiceAsync<T>(IEnumerable<T>, Int32) Random.ChoiceAsync<T>(IEnumerable<T>, Int32, CancellationToken) Random.Sample<T>(T[], Int32) Random.SampleAsync<T>(T[], Int32) Random.SampleAsync<T>(T[], Int32, CancellationToken) Random.Sample<T>(IEnumerable<T>, Int32) Random.SampleAsync<T>(IEnumerable<T>, Int32) Random.SampleAsync<T>(IEnumerable<T>, Int32, CancellationToken) Random.Shuffle<T>(T[]) Random.ShuffleAsync<T>(T[]) Random.ShuffleAsync<T>(T[], CancellationToken) Random.Shuffle<T>(IEnumerable<T>) Random.ShuffleAsync<T>(IEnumerable<T>) Random.ShuffleAsync<T>(IEnumerable<T>, CancellationToken) Random.ShuffleInPlace<T>(T[]) Random.ShuffleInPlaceAsync<T>(T[]) Random.ShuffleInPlaceAsync<T>(T[], CancellationToken) Namespace : Litdex.Security.RNG.PRNG Assembly : Litdex.Security.RNG.dll Syntax public class Tyche : Random32, IRNG, IDistribution, ISequence Constructors | Improve this Doc View Source Tyche(UInt64, UInt32) Create an instance of Tyche object. Declaration public Tyche(ulong seed = null, uint idx = null) Parameters Type Name Description System.UInt64 seed RNG seed. System.UInt32 idx Unique key. Methods | Improve this Doc View Source AlgorithmName() Declaration public override string AlgorithmName() Returns Type Description System.String Overrides Random32.AlgorithmName() | Improve this Doc View Source Finalize() Declaration protected void Finalize() | Improve this Doc View Source Init(UInt64, UInt32) Initialzied internal state. Declaration protected void Init(ulong seed, uint idx) Parameters Type Name Description System.UInt64 seed RNG seed. System.UInt32 idx Unique key. | Improve this Doc View Source Mix() Update internal state based on quater round function of ChaCha stream chiper. Declaration protected virtual void Mix() | Improve this Doc View Source Next() Declaration protected override uint Next() Returns Type Description System.UInt32 Overrides Random32.Next() | Improve this Doc View Source Reseed() Declaration public override void Reseed() Overrides Random.Reseed() | Improve this Doc View Source SetSeed(UInt32[]) Declaration public override void SetSeed(params uint[] seed) Parameters Type Name Description System.UInt32 [] seed Overrides Random32.SetSeed(UInt32[]) | Improve this Doc View Source SetSeed(UInt64, UInt32) Set Litdex.Security.RNG seed manually. Declaration public virtual void SetSeed(ulong seed, uint idx) Parameters Type Name Description System.UInt64 seed RNG seed. System.UInt32 idx Unique key. Implements IRNG IDistribution ISequence"
  },
  "api/Litdex.Security.RNG.PRNG.Tychei.html": {
    "href": "api/Litdex.Security.RNG.PRNG.Tychei.html",
    "title": "Class Tychei | Litdex.Security.RNG",
    "keywords": "Class Tychei Inverse Tyche . Inheritance System.Object Random Random32 Tyche Tychei Implements IRNG IDistribution ISequence Inherited Members Tyche.Init(UInt64, UInt32) Tyche.Reseed() Tyche.SetSeed(UInt64, UInt32) Tyche.SetSeed(UInt32[]) Random32._State Random32._Size Random32.NextBoolean() Random32.NextByte() Random32.NextBytes(Int32) Random32.NextBytesLittleEndian(Int32) Random32.NextBytesBigEndian(Int32) Random32.Fill(Byte[]) Random32.FillLittleEndian(Byte[]) Random32.FillBigEndian(Byte[]) Random32.NextInt() Random32.NextLong() Random._InitialRoll Random.ToString() Random.NextByte(Byte, Byte) Random.NextInt(UInt32, UInt32) Random.NextLong(UInt64, UInt64) Random.NextDouble() Random.NextDouble(Double, Double) Random._NextGaussian Random.NextGaussian(Double, Double, Boolean) Random.NextGamma(Double, Double) Random.Choice<T>(T[]) Random.Choice<T>(T[], Int32) Random.ChoiceAsync<T>(T[], Int32) Random.ChoiceAsync<T>(T[], Int32, CancellationToken) Random.Choice<T>(IEnumerable<T>) Random.Choice<T>(IEnumerable<T>, Int32) Random.ChoiceAsync<T>(IEnumerable<T>, Int32) Random.ChoiceAsync<T>(IEnumerable<T>, Int32, CancellationToken) Random.Sample<T>(T[], Int32) Random.SampleAsync<T>(T[], Int32) Random.SampleAsync<T>(T[], Int32, CancellationToken) Random.Sample<T>(IEnumerable<T>, Int32) Random.SampleAsync<T>(IEnumerable<T>, Int32) Random.SampleAsync<T>(IEnumerable<T>, Int32, CancellationToken) Random.Shuffle<T>(T[]) Random.ShuffleAsync<T>(T[]) Random.ShuffleAsync<T>(T[], CancellationToken) Random.Shuffle<T>(IEnumerable<T>) Random.ShuffleAsync<T>(IEnumerable<T>) Random.ShuffleAsync<T>(IEnumerable<T>, CancellationToken) Random.ShuffleInPlace<T>(T[]) Random.ShuffleInPlaceAsync<T>(T[]) Random.ShuffleInPlaceAsync<T>(T[], CancellationToken) Namespace : Litdex.Security.RNG.PRNG Assembly : Litdex.Security.RNG.dll Syntax public class Tychei : Tyche, IRNG, IDistribution, ISequence Constructors | Improve this Doc View Source Tychei(UInt64, UInt32) Create an instance of Tychei object. Declaration public Tychei(ulong seed = 18369614221190033421UL, uint idx = null) Parameters Type Name Description System.UInt64 seed RNG seed. System.UInt32 idx unique key. Methods | Improve this Doc View Source AlgorithmName() Declaration public override string AlgorithmName() Returns Type Description System.String Overrides Tyche.AlgorithmName() | Improve this Doc View Source Finalize() Declaration protected void Finalize() | Improve this Doc View Source Mix() Update internal state based on quater round function of ChaCha stream chiper. Declaration protected override void Mix() Overrides Tyche.Mix() | Improve this Doc View Source Next() Declaration protected override uint Next() Returns Type Description System.UInt32 Overrides Tyche.Next() Implements IRNG IDistribution ISequence"
  },
  "api/Litdex.Security.RNG.PRNG.Wyrand.html": {
    "href": "api/Litdex.Security.RNG.PRNG.Wyrand.html",
    "title": "Class Wyrand | Litdex.Security.RNG",
    "keywords": "Class Wyrand Based on Wyhash from https://github.com/wangyi-fudan/wyhash Inheritance System.Object Random Random64 Wyrand Implements IRNG IDistribution ISequence Inherited Members Random64._State Random64._Size Random64.SetSeed(UInt64[]) Random64.NextBoolean() Random64.NextByte() Random64.NextBytes(Int32) Random64.NextBytesLittleEndian(Int32) Random64.NextBytesBigEndian(Int32) Random64.Fill(Byte[]) Random64.FillLittleEndian(Byte[]) Random64.FillBigEndian(Byte[]) Random64.NextInt() Random64.NextLong() Random._InitialRoll Random.ToString() Random.NextByte(Byte, Byte) Random.NextInt(UInt32, UInt32) Random.NextLong(UInt64, UInt64) Random.NextDouble() Random.NextDouble(Double, Double) Random._NextGaussian Random.NextGaussian(Double, Double, Boolean) Random.NextGamma(Double, Double) Random.Choice<T>(T[]) Random.Choice<T>(T[], Int32) Random.ChoiceAsync<T>(T[], Int32) Random.ChoiceAsync<T>(T[], Int32, CancellationToken) Random.Choice<T>(IEnumerable<T>) Random.Choice<T>(IEnumerable<T>, Int32) Random.ChoiceAsync<T>(IEnumerable<T>, Int32) Random.ChoiceAsync<T>(IEnumerable<T>, Int32, CancellationToken) Random.Sample<T>(T[], Int32) Random.SampleAsync<T>(T[], Int32) Random.SampleAsync<T>(T[], Int32, CancellationToken) Random.Sample<T>(IEnumerable<T>, Int32) Random.SampleAsync<T>(IEnumerable<T>, Int32) Random.SampleAsync<T>(IEnumerable<T>, Int32, CancellationToken) Random.Shuffle<T>(T[]) Random.ShuffleAsync<T>(T[]) Random.ShuffleAsync<T>(T[], CancellationToken) Random.Shuffle<T>(IEnumerable<T>) Random.ShuffleAsync<T>(IEnumerable<T>) Random.ShuffleAsync<T>(IEnumerable<T>, CancellationToken) Random.ShuffleInPlace<T>(T[]) Random.ShuffleInPlaceAsync<T>(T[]) Random.ShuffleInPlaceAsync<T>(T[], CancellationToken) Namespace : Litdex.Security.RNG.PRNG Assembly : Litdex.Security.RNG.dll Syntax public class Wyrand : Random64, IRNG, IDistribution, ISequence Constructors | Improve this Doc View Source Wyrand(UInt64) Create an instance of Wyrand object. Declaration public Wyrand(ulong seed = null) Parameters Type Name Description System.UInt64 seed RNG seed. Methods | Improve this Doc View Source AlgorithmName() Declaration public override string AlgorithmName() Returns Type Description System.String Overrides Random64.AlgorithmName() | Improve this Doc View Source Finalize() Destructor. Declaration protected void Finalize() | Improve this Doc View Source MUM(UInt64, UInt64) Declaration protected ulong MUM(ulong x, ulong y) Parameters Type Name Description System.UInt64 x System.UInt64 y Returns Type Description System.UInt64 | Improve this Doc View Source Next() Declaration protected override ulong Next() Returns Type Description System.UInt64 Overrides Random64.Next() | Improve this Doc View Source Reseed() Declaration public override void Reseed() Overrides Random.Reseed() | Improve this Doc View Source SetSeed(UInt64) Set Litdex.Security.RNG seed manually. Declaration public void SetSeed(ulong seed) Parameters Type Name Description System.UInt64 seed RNG seed. Implements IRNG IDistribution ISequence"
  },
  "api/Litdex.Security.RNG.PRNG.Xoroshiro128Plus.html": {
    "href": "api/Litdex.Security.RNG.PRNG.Xoroshiro128Plus.html",
    "title": "Class Xoroshiro128Plus | Litdex.Security.RNG",
    "keywords": "Class Xoroshiro128Plus Xoroshiro128+ PRNG is improved from Xoroshift128. Inheritance System.Object Random Random64 Xoroshiro128Plus Xoroshiro128PlusPlus Xoroshiro128StarStar Implements IRNG IDistribution ISequence Inherited Members Random64._State Random64._Size Random64.SetSeed(UInt64[]) Random64.NextBoolean() Random64.NextByte() Random64.NextBytes(Int32) Random64.NextBytesLittleEndian(Int32) Random64.NextBytesBigEndian(Int32) Random64.Fill(Byte[]) Random64.FillLittleEndian(Byte[]) Random64.FillBigEndian(Byte[]) Random64.NextInt() Random64.NextLong() Random._InitialRoll Random.ToString() Random.NextByte(Byte, Byte) Random.NextInt(UInt32, UInt32) Random.NextLong(UInt64, UInt64) Random.NextDouble() Random.NextDouble(Double, Double) Random._NextGaussian Random.NextGaussian(Double, Double, Boolean) Random.NextGamma(Double, Double) Random.Choice<T>(T[]) Random.Choice<T>(T[], Int32) Random.ChoiceAsync<T>(T[], Int32) Random.ChoiceAsync<T>(T[], Int32, CancellationToken) Random.Choice<T>(IEnumerable<T>) Random.Choice<T>(IEnumerable<T>, Int32) Random.ChoiceAsync<T>(IEnumerable<T>, Int32) Random.ChoiceAsync<T>(IEnumerable<T>, Int32, CancellationToken) Random.Sample<T>(T[], Int32) Random.SampleAsync<T>(T[], Int32) Random.SampleAsync<T>(T[], Int32, CancellationToken) Random.Sample<T>(IEnumerable<T>, Int32) Random.SampleAsync<T>(IEnumerable<T>, Int32) Random.SampleAsync<T>(IEnumerable<T>, Int32, CancellationToken) Random.Shuffle<T>(T[]) Random.ShuffleAsync<T>(T[]) Random.ShuffleAsync<T>(T[], CancellationToken) Random.Shuffle<T>(IEnumerable<T>) Random.ShuffleAsync<T>(IEnumerable<T>) Random.ShuffleAsync<T>(IEnumerable<T>, CancellationToken) Random.ShuffleInPlace<T>(T[]) Random.ShuffleInPlaceAsync<T>(T[]) Random.ShuffleInPlaceAsync<T>(T[], CancellationToken) Namespace : Litdex.Security.RNG.PRNG Assembly : Litdex.Security.RNG.dll Syntax public class Xoroshiro128Plus : Random64, IRNG, IDistribution, ISequence Remarks Source: https://prng.di.unimi.it/xoroshiro128plus.c Constructors | Improve this Doc View Source Xoroshiro128Plus(UInt64, UInt64) Create an instance of Xoroshiro128Plus object. Declaration public Xoroshiro128Plus(ulong seed1 = null, ulong seed2 = null) Parameters Type Name Description System.UInt64 seed1 First RNG seed. System.UInt64 seed2 Second RNG seed. Methods | Improve this Doc View Source AlgorithmName() Declaration public override string AlgorithmName() Returns Type Description System.String Overrides Random64.AlgorithmName() | Improve this Doc View Source Finalize() Declaration protected void Finalize() | Improve this Doc View Source Next() Declaration protected override ulong Next() Returns Type Description System.UInt64 Overrides Random64.Next() | Improve this Doc View Source NextJump() 2^64 calls to NextLong(), it can be used to generate 2^64 non-overlapping subsequences for parallel computations. Declaration public virtual void NextJump() | Improve this Doc View Source Reseed() Declaration public override void Reseed() Overrides Random.Reseed() | Improve this Doc View Source SetSeed(UInt64, UInt64) Set Litdex.Security.RNG seed manually. Declaration public virtual void SetSeed(ulong seed1, ulong seed2) Parameters Type Name Description System.UInt64 seed1 First RNG seed. System.UInt64 seed2 Second RNG seed. Implements IRNG IDistribution ISequence"
  },
  "api/Litdex.Security.RNG.PRNG.Xoroshiro128PlusPlus.html": {
    "href": "api/Litdex.Security.RNG.PRNG.Xoroshiro128PlusPlus.html",
    "title": "Class Xoroshiro128PlusPlus | Litdex.Security.RNG",
    "keywords": "Class Xoroshiro128PlusPlus Variations of Xoroshiro128Plus . Inheritance System.Object Random Random64 Xoroshiro128Plus Xoroshiro128PlusPlus Implements IRNG IDistribution ISequence Inherited Members Xoroshiro128Plus.Reseed() Xoroshiro128Plus.NextJump() Xoroshiro128Plus.SetSeed(UInt64, UInt64) Random64._State Random64._Size Random64.SetSeed(UInt64[]) Random64.NextBoolean() Random64.NextByte() Random64.NextBytes(Int32) Random64.NextBytesLittleEndian(Int32) Random64.NextBytesBigEndian(Int32) Random64.Fill(Byte[]) Random64.FillLittleEndian(Byte[]) Random64.FillBigEndian(Byte[]) Random64.NextInt() Random64.NextLong() Random._InitialRoll Random.ToString() Random.NextByte(Byte, Byte) Random.NextInt(UInt32, UInt32) Random.NextLong(UInt64, UInt64) Random.NextDouble() Random.NextDouble(Double, Double) Random._NextGaussian Random.NextGaussian(Double, Double, Boolean) Random.NextGamma(Double, Double) Random.Choice<T>(T[]) Random.Choice<T>(T[], Int32) Random.ChoiceAsync<T>(T[], Int32) Random.ChoiceAsync<T>(T[], Int32, CancellationToken) Random.Choice<T>(IEnumerable<T>) Random.Choice<T>(IEnumerable<T>, Int32) Random.ChoiceAsync<T>(IEnumerable<T>, Int32) Random.ChoiceAsync<T>(IEnumerable<T>, Int32, CancellationToken) Random.Sample<T>(T[], Int32) Random.SampleAsync<T>(T[], Int32) Random.SampleAsync<T>(T[], Int32, CancellationToken) Random.Sample<T>(IEnumerable<T>, Int32) Random.SampleAsync<T>(IEnumerable<T>, Int32) Random.SampleAsync<T>(IEnumerable<T>, Int32, CancellationToken) Random.Shuffle<T>(T[]) Random.ShuffleAsync<T>(T[]) Random.ShuffleAsync<T>(T[], CancellationToken) Random.Shuffle<T>(IEnumerable<T>) Random.ShuffleAsync<T>(IEnumerable<T>) Random.ShuffleAsync<T>(IEnumerable<T>, CancellationToken) Random.ShuffleInPlace<T>(T[]) Random.ShuffleInPlaceAsync<T>(T[]) Random.ShuffleInPlaceAsync<T>(T[], CancellationToken) Namespace : Litdex.Security.RNG.PRNG Assembly : Litdex.Security.RNG.dll Syntax public class Xoroshiro128PlusPlus : Xoroshiro128Plus, IRNG, IDistribution, ISequence Remarks Source: https://prng.di.unimi.it/xoroshiro128plusplus.c Constructors | Improve this Doc View Source Xoroshiro128PlusPlus(UInt64, UInt64) Create an instance of Xoroshiro128PlusPlus object. Declaration public Xoroshiro128PlusPlus(ulong seed1 = null, ulong seed2 = null) Parameters Type Name Description System.UInt64 seed1 First RNG seed. System.UInt64 seed2 Second RNG seed. Methods | Improve this Doc View Source AlgorithmName() Declaration public override string AlgorithmName() Returns Type Description System.String Overrides Xoroshiro128Plus.AlgorithmName() | Improve this Doc View Source Finalize() Declaration protected void Finalize() | Improve this Doc View Source Next() Declaration protected override ulong Next() Returns Type Description System.UInt64 Overrides Xoroshiro128Plus.Next() Implements IRNG IDistribution ISequence"
  },
  "api/Litdex.Security.RNG.PRNG.Xoroshiro128StarStar.html": {
    "href": "api/Litdex.Security.RNG.PRNG.Xoroshiro128StarStar.html",
    "title": "Class Xoroshiro128StarStar | Litdex.Security.RNG",
    "keywords": "Class Xoroshiro128StarStar Variations of Xoroshiro128Plus . Inheritance System.Object Random Random64 Xoroshiro128Plus Xoroshiro128StarStar Implements IRNG IDistribution ISequence Inherited Members Xoroshiro128Plus.Reseed() Xoroshiro128Plus.NextJump() Xoroshiro128Plus.SetSeed(UInt64, UInt64) Random64._State Random64._Size Random64.SetSeed(UInt64[]) Random64.NextBoolean() Random64.NextByte() Random64.NextBytes(Int32) Random64.NextBytesLittleEndian(Int32) Random64.NextBytesBigEndian(Int32) Random64.Fill(Byte[]) Random64.FillLittleEndian(Byte[]) Random64.FillBigEndian(Byte[]) Random64.NextInt() Random64.NextLong() Random._InitialRoll Random.ToString() Random.NextByte(Byte, Byte) Random.NextInt(UInt32, UInt32) Random.NextLong(UInt64, UInt64) Random.NextDouble() Random.NextDouble(Double, Double) Random._NextGaussian Random.NextGaussian(Double, Double, Boolean) Random.NextGamma(Double, Double) Random.Choice<T>(T[]) Random.Choice<T>(T[], Int32) Random.ChoiceAsync<T>(T[], Int32) Random.ChoiceAsync<T>(T[], Int32, CancellationToken) Random.Choice<T>(IEnumerable<T>) Random.Choice<T>(IEnumerable<T>, Int32) Random.ChoiceAsync<T>(IEnumerable<T>, Int32) Random.ChoiceAsync<T>(IEnumerable<T>, Int32, CancellationToken) Random.Sample<T>(T[], Int32) Random.SampleAsync<T>(T[], Int32) Random.SampleAsync<T>(T[], Int32, CancellationToken) Random.Sample<T>(IEnumerable<T>, Int32) Random.SampleAsync<T>(IEnumerable<T>, Int32) Random.SampleAsync<T>(IEnumerable<T>, Int32, CancellationToken) Random.Shuffle<T>(T[]) Random.ShuffleAsync<T>(T[]) Random.ShuffleAsync<T>(T[], CancellationToken) Random.Shuffle<T>(IEnumerable<T>) Random.ShuffleAsync<T>(IEnumerable<T>) Random.ShuffleAsync<T>(IEnumerable<T>, CancellationToken) Random.ShuffleInPlace<T>(T[]) Random.ShuffleInPlaceAsync<T>(T[]) Random.ShuffleInPlaceAsync<T>(T[], CancellationToken) Namespace : Litdex.Security.RNG.PRNG Assembly : Litdex.Security.RNG.dll Syntax public class Xoroshiro128StarStar : Xoroshiro128Plus, IRNG, IDistribution, ISequence Remarks Source: https://prng.di.unimi.it/xoroshiro128starstar.c Constructors | Improve this Doc View Source Xoroshiro128StarStar(UInt64, UInt64) Create an instance of Xoroshiro128PlusPlus object. Declaration public Xoroshiro128StarStar(ulong seed1 = null, ulong seed2 = null) Parameters Type Name Description System.UInt64 seed1 First RNG seed. System.UInt64 seed2 Second RNG seed. Methods | Improve this Doc View Source AlgorithmName() Declaration public override string AlgorithmName() Returns Type Description System.String Overrides Xoroshiro128Plus.AlgorithmName() | Improve this Doc View Source Finalize() Declaration protected void Finalize() | Improve this Doc View Source Next() Declaration protected override ulong Next() Returns Type Description System.UInt64 Overrides Xoroshiro128Plus.Next() Implements IRNG IDistribution ISequence"
  },
  "api/Litdex.Security.RNG.PRNG.Xoshiro256Plus.html": {
    "href": "api/Litdex.Security.RNG.PRNG.Xoshiro256Plus.html",
    "title": "Class Xoshiro256Plus | Litdex.Security.RNG",
    "keywords": "Class Xoshiro256Plus (XOR/shift/rotate) all-purpose generators. Inheritance System.Object Random Random64 Xoshiro256Plus Xoshiro256PlusPlus Xoshiro256StarStar Implements IRNG IDistribution ISequence Inherited Members Random64._State Random64._Size Random64.SetSeed(UInt64[]) Random64.NextBoolean() Random64.NextByte() Random64.NextBytes(Int32) Random64.NextBytesLittleEndian(Int32) Random64.NextBytesBigEndian(Int32) Random64.Fill(Byte[]) Random64.FillLittleEndian(Byte[]) Random64.FillBigEndian(Byte[]) Random64.NextInt() Random64.NextLong() Random._InitialRoll Random.ToString() Random.NextByte(Byte, Byte) Random.NextInt(UInt32, UInt32) Random.NextLong(UInt64, UInt64) Random.NextDouble() Random.NextDouble(Double, Double) Random._NextGaussian Random.NextGaussian(Double, Double, Boolean) Random.NextGamma(Double, Double) Random.Choice<T>(T[]) Random.Choice<T>(T[], Int32) Random.ChoiceAsync<T>(T[], Int32) Random.ChoiceAsync<T>(T[], Int32, CancellationToken) Random.Choice<T>(IEnumerable<T>) Random.Choice<T>(IEnumerable<T>, Int32) Random.ChoiceAsync<T>(IEnumerable<T>, Int32) Random.ChoiceAsync<T>(IEnumerable<T>, Int32, CancellationToken) Random.Sample<T>(T[], Int32) Random.SampleAsync<T>(T[], Int32) Random.SampleAsync<T>(T[], Int32, CancellationToken) Random.Sample<T>(IEnumerable<T>, Int32) Random.SampleAsync<T>(IEnumerable<T>, Int32) Random.SampleAsync<T>(IEnumerable<T>, Int32, CancellationToken) Random.Shuffle<T>(T[]) Random.ShuffleAsync<T>(T[]) Random.ShuffleAsync<T>(T[], CancellationToken) Random.Shuffle<T>(IEnumerable<T>) Random.ShuffleAsync<T>(IEnumerable<T>) Random.ShuffleAsync<T>(IEnumerable<T>, CancellationToken) Random.ShuffleInPlace<T>(T[]) Random.ShuffleInPlaceAsync<T>(T[]) Random.ShuffleInPlaceAsync<T>(T[], CancellationToken) Namespace : Litdex.Security.RNG.PRNG Assembly : Litdex.Security.RNG.dll Syntax public class Xoshiro256Plus : Random64, IRNG, IDistribution, ISequence Remarks Source: https://prng.di.unimi.it/xoshiro256plus.c Constructors | Improve this Doc View Source Xoshiro256Plus(UInt64, UInt64, UInt64, UInt64) Create an instance of Xoshiro256Plus object. Declaration public Xoshiro256Plus(ulong seed1 = null, ulong seed2 = null, ulong seed3 = null, ulong seed4 = null) Parameters Type Name Description System.UInt64 seed1 First RNG seed. System.UInt64 seed2 Second RNG seed. System.UInt64 seed3 Third RNG seed. System.UInt64 seed4 Fourth RNG seed. | Improve this Doc View Source Xoshiro256Plus(UInt64[]) Create an instance of Xoshiro256Plus object. Declaration public Xoshiro256Plus(ulong[] seed) Parameters Type Name Description System.UInt64 [] seed RNG seed. Methods | Improve this Doc View Source AlgorithmName() Declaration public override string AlgorithmName() Returns Type Description System.String Overrides Random64.AlgorithmName() | Improve this Doc View Source Finalize() Destructor. Declaration protected void Finalize() | Improve this Doc View Source Next() Declaration protected override ulong Next() Returns Type Description System.UInt64 Overrides Random64.Next() | Improve this Doc View Source NextJump() This is the jump function for the generator. It is equivalent to 2^128 calls to next(); it can be used to generate 2^128 non-overlapping subsequences for parallel computations. Declaration public virtual void NextJump() | Improve this Doc View Source Reseed() Declaration public override void Reseed() Overrides Random.Reseed() | Improve this Doc View Source SetSeed(UInt64, UInt64, UInt64, UInt64) Set Litdex.Security.RNG seed manually. Declaration public virtual void SetSeed(ulong seed1 = null, ulong seed2 = null, ulong seed3 = null, ulong seed4 = null) Parameters Type Name Description System.UInt64 seed1 First RNG seed. System.UInt64 seed2 Second RNG seed. System.UInt64 seed3 Third RNG seed. System.UInt64 seed4 Fourth RNG seed. Implements IRNG IDistribution ISequence"
  },
  "api/Litdex.Security.RNG.PRNG.Xoshiro256PlusPlus.html": {
    "href": "api/Litdex.Security.RNG.PRNG.Xoshiro256PlusPlus.html",
    "title": "Class Xoshiro256PlusPlus | Litdex.Security.RNG",
    "keywords": "Class Xoshiro256PlusPlus Variations of Xoshiro256Plus . Inheritance System.Object Random Random64 Xoshiro256Plus Xoshiro256PlusPlus Implements IRNG IDistribution ISequence Inherited Members Xoshiro256Plus.Reseed() Xoshiro256Plus.NextJump() Xoshiro256Plus.SetSeed(UInt64, UInt64, UInt64, UInt64) Random64._State Random64._Size Random64.SetSeed(UInt64[]) Random64.NextBoolean() Random64.NextByte() Random64.NextBytes(Int32) Random64.NextBytesLittleEndian(Int32) Random64.NextBytesBigEndian(Int32) Random64.Fill(Byte[]) Random64.FillLittleEndian(Byte[]) Random64.FillBigEndian(Byte[]) Random64.NextInt() Random64.NextLong() Random._InitialRoll Random.ToString() Random.NextByte(Byte, Byte) Random.NextInt(UInt32, UInt32) Random.NextLong(UInt64, UInt64) Random.NextDouble() Random.NextDouble(Double, Double) Random._NextGaussian Random.NextGaussian(Double, Double, Boolean) Random.NextGamma(Double, Double) Random.Choice<T>(T[]) Random.Choice<T>(T[], Int32) Random.ChoiceAsync<T>(T[], Int32) Random.ChoiceAsync<T>(T[], Int32, CancellationToken) Random.Choice<T>(IEnumerable<T>) Random.Choice<T>(IEnumerable<T>, Int32) Random.ChoiceAsync<T>(IEnumerable<T>, Int32) Random.ChoiceAsync<T>(IEnumerable<T>, Int32, CancellationToken) Random.Sample<T>(T[], Int32) Random.SampleAsync<T>(T[], Int32) Random.SampleAsync<T>(T[], Int32, CancellationToken) Random.Sample<T>(IEnumerable<T>, Int32) Random.SampleAsync<T>(IEnumerable<T>, Int32) Random.SampleAsync<T>(IEnumerable<T>, Int32, CancellationToken) Random.Shuffle<T>(T[]) Random.ShuffleAsync<T>(T[]) Random.ShuffleAsync<T>(T[], CancellationToken) Random.Shuffle<T>(IEnumerable<T>) Random.ShuffleAsync<T>(IEnumerable<T>) Random.ShuffleAsync<T>(IEnumerable<T>, CancellationToken) Random.ShuffleInPlace<T>(T[]) Random.ShuffleInPlaceAsync<T>(T[]) Random.ShuffleInPlaceAsync<T>(T[], CancellationToken) Namespace : Litdex.Security.RNG.PRNG Assembly : Litdex.Security.RNG.dll Syntax public class Xoshiro256PlusPlus : Xoshiro256Plus, IRNG, IDistribution, ISequence Remarks Source: https://prng.di.unimi.it/xoshiro256plusplus.c Constructors | Improve this Doc View Source Xoshiro256PlusPlus(UInt64, UInt64, UInt64, UInt64) Create an instance of Xoshiro256PlusPlus object. Declaration public Xoshiro256PlusPlus(ulong seed1 = null, ulong seed2 = null, ulong seed3 = null, ulong seed4 = null) Parameters Type Name Description System.UInt64 seed1 First RNG seed. System.UInt64 seed2 Second RNG seed. System.UInt64 seed3 Third RNG seed. System.UInt64 seed4 Fourth RNG seed. | Improve this Doc View Source Xoshiro256PlusPlus(UInt64[]) Create an instance of Xoshiro256PlusPlus object. Declaration public Xoshiro256PlusPlus(ulong[] seed) Parameters Type Name Description System.UInt64 [] seed RNG seed. Methods | Improve this Doc View Source AlgorithmName() Declaration public override string AlgorithmName() Returns Type Description System.String Overrides Xoshiro256Plus.AlgorithmName() | Improve this Doc View Source Finalize() Destructor. Declaration protected void Finalize() | Improve this Doc View Source Next() Declaration protected override ulong Next() Returns Type Description System.UInt64 Overrides Xoshiro256Plus.Next() Implements IRNG IDistribution ISequence"
  },
  "api/Litdex.Security.RNG.PRNG.Xoshiro256StarStar.html": {
    "href": "api/Litdex.Security.RNG.PRNG.Xoshiro256StarStar.html",
    "title": "Class Xoshiro256StarStar | Litdex.Security.RNG",
    "keywords": "Class Xoshiro256StarStar Variations of Xoshiro256Plus . Inheritance System.Object Random Random64 Xoshiro256Plus Xoshiro256StarStar Implements IRNG IDistribution ISequence Inherited Members Xoshiro256Plus.Reseed() Xoshiro256Plus.NextJump() Xoshiro256Plus.SetSeed(UInt64, UInt64, UInt64, UInt64) Random64._State Random64._Size Random64.SetSeed(UInt64[]) Random64.NextBoolean() Random64.NextByte() Random64.NextBytes(Int32) Random64.NextBytesLittleEndian(Int32) Random64.NextBytesBigEndian(Int32) Random64.Fill(Byte[]) Random64.FillLittleEndian(Byte[]) Random64.FillBigEndian(Byte[]) Random64.NextInt() Random64.NextLong() Random._InitialRoll Random.ToString() Random.NextByte(Byte, Byte) Random.NextInt(UInt32, UInt32) Random.NextLong(UInt64, UInt64) Random.NextDouble() Random.NextDouble(Double, Double) Random._NextGaussian Random.NextGaussian(Double, Double, Boolean) Random.NextGamma(Double, Double) Random.Choice<T>(T[]) Random.Choice<T>(T[], Int32) Random.ChoiceAsync<T>(T[], Int32) Random.ChoiceAsync<T>(T[], Int32, CancellationToken) Random.Choice<T>(IEnumerable<T>) Random.Choice<T>(IEnumerable<T>, Int32) Random.ChoiceAsync<T>(IEnumerable<T>, Int32) Random.ChoiceAsync<T>(IEnumerable<T>, Int32, CancellationToken) Random.Sample<T>(T[], Int32) Random.SampleAsync<T>(T[], Int32) Random.SampleAsync<T>(T[], Int32, CancellationToken) Random.Sample<T>(IEnumerable<T>, Int32) Random.SampleAsync<T>(IEnumerable<T>, Int32) Random.SampleAsync<T>(IEnumerable<T>, Int32, CancellationToken) Random.Shuffle<T>(T[]) Random.ShuffleAsync<T>(T[]) Random.ShuffleAsync<T>(T[], CancellationToken) Random.Shuffle<T>(IEnumerable<T>) Random.ShuffleAsync<T>(IEnumerable<T>) Random.ShuffleAsync<T>(IEnumerable<T>, CancellationToken) Random.ShuffleInPlace<T>(T[]) Random.ShuffleInPlaceAsync<T>(T[]) Random.ShuffleInPlaceAsync<T>(T[], CancellationToken) Namespace : Litdex.Security.RNG.PRNG Assembly : Litdex.Security.RNG.dll Syntax public class Xoshiro256StarStar : Xoshiro256Plus, IRNG, IDistribution, ISequence Remarks Source: https://prng.di.unimi.it/xoshiro256starstar.c Constructors | Improve this Doc View Source Xoshiro256StarStar(UInt64, UInt64, UInt64, UInt64) Create an instance of Xoshiro256StarStar object. Declaration public Xoshiro256StarStar(ulong seed1 = null, ulong seed2 = null, ulong seed3 = null, ulong seed4 = null) Parameters Type Name Description System.UInt64 seed1 First RNG seed. System.UInt64 seed2 Second RNG seed. System.UInt64 seed3 Third RNG seed. System.UInt64 seed4 Fourth RNG seed. | Improve this Doc View Source Xoshiro256StarStar(UInt64[]) Create an instance of Xoshiro256StarStar object. Declaration public Xoshiro256StarStar(ulong[] seed) Parameters Type Name Description System.UInt64 [] seed RNG seed. Methods | Improve this Doc View Source AlgorithmName() Declaration public override string AlgorithmName() Returns Type Description System.String Overrides Xoshiro256Plus.AlgorithmName() | Improve this Doc View Source Finalize() Destructor. Declaration protected void Finalize() | Improve this Doc View Source Next() Declaration protected override ulong Next() Returns Type Description System.UInt64 Overrides Xoshiro256Plus.Next() Implements IRNG IDistribution ISequence"
  },
  "api/Litdex.Security.RNG.PRNG.Xoshiro512Plus.html": {
    "href": "api/Litdex.Security.RNG.PRNG.Xoshiro512Plus.html",
    "title": "Class Xoshiro512Plus | Litdex.Security.RNG",
    "keywords": "Class Xoshiro512Plus (XOR/shift/rotate) all-purpose generators. Inheritance System.Object Random Random64 Xoshiro512Plus Xoshiro512PlusPlus Xoshiro512StarStar Implements IRNG IDistribution ISequence Inherited Members Random64._State Random64._Size Random64.SetSeed(UInt64[]) Random64.NextBoolean() Random64.NextByte() Random64.NextBytes(Int32) Random64.NextBytesLittleEndian(Int32) Random64.NextBytesBigEndian(Int32) Random64.Fill(Byte[]) Random64.FillLittleEndian(Byte[]) Random64.FillBigEndian(Byte[]) Random64.NextInt() Random64.NextLong() Random._InitialRoll Random.ToString() Random.NextByte(Byte, Byte) Random.NextInt(UInt32, UInt32) Random.NextLong(UInt64, UInt64) Random.NextDouble() Random.NextDouble(Double, Double) Random._NextGaussian Random.NextGaussian(Double, Double, Boolean) Random.NextGamma(Double, Double) Random.Choice<T>(T[]) Random.Choice<T>(T[], Int32) Random.ChoiceAsync<T>(T[], Int32) Random.ChoiceAsync<T>(T[], Int32, CancellationToken) Random.Choice<T>(IEnumerable<T>) Random.Choice<T>(IEnumerable<T>, Int32) Random.ChoiceAsync<T>(IEnumerable<T>, Int32) Random.ChoiceAsync<T>(IEnumerable<T>, Int32, CancellationToken) Random.Sample<T>(T[], Int32) Random.SampleAsync<T>(T[], Int32) Random.SampleAsync<T>(T[], Int32, CancellationToken) Random.Sample<T>(IEnumerable<T>, Int32) Random.SampleAsync<T>(IEnumerable<T>, Int32) Random.SampleAsync<T>(IEnumerable<T>, Int32, CancellationToken) Random.Shuffle<T>(T[]) Random.ShuffleAsync<T>(T[]) Random.ShuffleAsync<T>(T[], CancellationToken) Random.Shuffle<T>(IEnumerable<T>) Random.ShuffleAsync<T>(IEnumerable<T>) Random.ShuffleAsync<T>(IEnumerable<T>, CancellationToken) Random.ShuffleInPlace<T>(T[]) Random.ShuffleInPlaceAsync<T>(T[]) Random.ShuffleInPlaceAsync<T>(T[], CancellationToken) Namespace : Litdex.Security.RNG.PRNG Assembly : Litdex.Security.RNG.dll Syntax public class Xoshiro512Plus : Random64, IRNG, IDistribution, ISequence Remarks Source: https://prng.di.unimi.it/xoshiro512plus.c Constructors | Improve this Doc View Source Xoshiro512Plus(UInt64, UInt64, UInt64, UInt64, UInt64, UInt64, UInt64, UInt64) Create an instance of Xoshiro512Plus object. Declaration public Xoshiro512Plus(ulong seed1 = null, ulong seed2 = null, ulong seed3 = null, ulong seed4 = null, ulong seed5 = null, ulong seed6 = null, ulong seed7 = null, ulong seed8 = null) Parameters Type Name Description System.UInt64 seed1 First RNG seed. System.UInt64 seed2 Second RNG seed. System.UInt64 seed3 Third RNG seed. System.UInt64 seed4 Fourth RNG seed. System.UInt64 seed5 Fifth RNG seed. System.UInt64 seed6 Sixth RNG seed. System.UInt64 seed7 Seventh RNG seed. System.UInt64 seed8 Eighth RNG seed. | Improve this Doc View Source Xoshiro512Plus(UInt64[]) Create an instance of Xoshiro512Plus object. Declaration public Xoshiro512Plus(ulong[] seed) Parameters Type Name Description System.UInt64 [] seed RNG seed. Methods | Improve this Doc View Source AlgorithmName() Declaration public override string AlgorithmName() Returns Type Description System.String Overrides Random64.AlgorithmName() | Improve this Doc View Source Finalize() Destructor Declaration protected void Finalize() | Improve this Doc View Source Next() Declaration protected override ulong Next() Returns Type Description System.UInt64 Overrides Random64.Next() | Improve this Doc View Source NextJump() This is the jump function for the generator. It is equivalent to 2^256 calls to next(); it can be used to generate 2^256 non-overlapping subsequences for parallel computations. Declaration public virtual void NextJump() | Improve this Doc View Source Reseed() Declaration public override void Reseed() Overrides Random.Reseed() | Improve this Doc View Source SetSeed(UInt64, UInt64, UInt64, UInt64, UInt64, UInt64, UInt64, UInt64) Set Litdex.Security.RNG seed manually. Declaration public virtual void SetSeed(ulong seed1 = null, ulong seed2 = null, ulong seed3 = null, ulong seed4 = null, ulong seed5 = null, ulong seed6 = null, ulong seed7 = null, ulong seed8 = null) Parameters Type Name Description System.UInt64 seed1 First RNG seed. System.UInt64 seed2 Second RNG seed. System.UInt64 seed3 Third RNG seed. System.UInt64 seed4 Fourth RNG seed. System.UInt64 seed5 Fifth RNG seed. System.UInt64 seed6 Sixth RNG seed. System.UInt64 seed7 Seventh RNG seed. System.UInt64 seed8 Eighth RNG seed. Implements IRNG IDistribution ISequence"
  },
  "api/Litdex.Security.RNG.PRNG.Xoshiro512PlusPlus.html": {
    "href": "api/Litdex.Security.RNG.PRNG.Xoshiro512PlusPlus.html",
    "title": "Class Xoshiro512PlusPlus | Litdex.Security.RNG",
    "keywords": "Class Xoshiro512PlusPlus Vartions of Xoshiro512Plus . Inheritance System.Object Random Random64 Xoshiro512Plus Xoshiro512PlusPlus Implements IRNG IDistribution ISequence Inherited Members Xoshiro512Plus.Reseed() Xoshiro512Plus.NextJump() Xoshiro512Plus.SetSeed(UInt64, UInt64, UInt64, UInt64, UInt64, UInt64, UInt64, UInt64) Random64._State Random64._Size Random64.SetSeed(UInt64[]) Random64.NextBoolean() Random64.NextByte() Random64.NextBytes(Int32) Random64.NextBytesLittleEndian(Int32) Random64.NextBytesBigEndian(Int32) Random64.Fill(Byte[]) Random64.FillLittleEndian(Byte[]) Random64.FillBigEndian(Byte[]) Random64.NextInt() Random64.NextLong() Random._InitialRoll Random.ToString() Random.NextByte(Byte, Byte) Random.NextInt(UInt32, UInt32) Random.NextLong(UInt64, UInt64) Random.NextDouble() Random.NextDouble(Double, Double) Random._NextGaussian Random.NextGaussian(Double, Double, Boolean) Random.NextGamma(Double, Double) Random.Choice<T>(T[]) Random.Choice<T>(T[], Int32) Random.ChoiceAsync<T>(T[], Int32) Random.ChoiceAsync<T>(T[], Int32, CancellationToken) Random.Choice<T>(IEnumerable<T>) Random.Choice<T>(IEnumerable<T>, Int32) Random.ChoiceAsync<T>(IEnumerable<T>, Int32) Random.ChoiceAsync<T>(IEnumerable<T>, Int32, CancellationToken) Random.Sample<T>(T[], Int32) Random.SampleAsync<T>(T[], Int32) Random.SampleAsync<T>(T[], Int32, CancellationToken) Random.Sample<T>(IEnumerable<T>, Int32) Random.SampleAsync<T>(IEnumerable<T>, Int32) Random.SampleAsync<T>(IEnumerable<T>, Int32, CancellationToken) Random.Shuffle<T>(T[]) Random.ShuffleAsync<T>(T[]) Random.ShuffleAsync<T>(T[], CancellationToken) Random.Shuffle<T>(IEnumerable<T>) Random.ShuffleAsync<T>(IEnumerable<T>) Random.ShuffleAsync<T>(IEnumerable<T>, CancellationToken) Random.ShuffleInPlace<T>(T[]) Random.ShuffleInPlaceAsync<T>(T[]) Random.ShuffleInPlaceAsync<T>(T[], CancellationToken) Namespace : Litdex.Security.RNG.PRNG Assembly : Litdex.Security.RNG.dll Syntax public class Xoshiro512PlusPlus : Xoshiro512Plus, IRNG, IDistribution, ISequence Remarks Source: https://prng.di.unimi.it/xoshiro512plusplus.c Constructors | Improve this Doc View Source Xoshiro512PlusPlus(UInt64, UInt64, UInt64, UInt64, UInt64, UInt64, UInt64, UInt64) Create an instance of Xoshiro512PlusPlus object. Declaration public Xoshiro512PlusPlus(ulong seed1 = null, ulong seed2 = null, ulong seed3 = null, ulong seed4 = null, ulong seed5 = null, ulong seed6 = null, ulong seed7 = null, ulong seed8 = null) Parameters Type Name Description System.UInt64 seed1 First RNG seed. System.UInt64 seed2 Second RNG seed. System.UInt64 seed3 Third RNG seed. System.UInt64 seed4 Fourth RNG seed. System.UInt64 seed5 Fifth RNG seed. System.UInt64 seed6 Sixth RNG seed. System.UInt64 seed7 Seventh RNG seed. System.UInt64 seed8 Eighth RNG seed. | Improve this Doc View Source Xoshiro512PlusPlus(UInt64[]) Create an instance of Xoshiro512PlusPlus object. Declaration public Xoshiro512PlusPlus(ulong[] seed) Parameters Type Name Description System.UInt64 [] seed RNG seed. Methods | Improve this Doc View Source AlgorithmName() Declaration public override string AlgorithmName() Returns Type Description System.String Overrides Xoshiro512Plus.AlgorithmName() | Improve this Doc View Source Finalize() Destructor Declaration protected void Finalize() | Improve this Doc View Source Next() Declaration protected override ulong Next() Returns Type Description System.UInt64 Overrides Xoshiro512Plus.Next() Implements IRNG IDistribution ISequence"
  },
  "api/Litdex.Security.RNG.PRNG.Xoshiro512StarStar.html": {
    "href": "api/Litdex.Security.RNG.PRNG.Xoshiro512StarStar.html",
    "title": "Class Xoshiro512StarStar | Litdex.Security.RNG",
    "keywords": "Class Xoshiro512StarStar Vartions of Xoshiro512Plus . Inheritance System.Object Random Random64 Xoshiro512Plus Xoshiro512StarStar Implements IRNG IDistribution ISequence Inherited Members Xoshiro512Plus.Reseed() Xoshiro512Plus.NextJump() Xoshiro512Plus.SetSeed(UInt64, UInt64, UInt64, UInt64, UInt64, UInt64, UInt64, UInt64) Random64._State Random64._Size Random64.SetSeed(UInt64[]) Random64.NextBoolean() Random64.NextByte() Random64.NextBytes(Int32) Random64.NextBytesLittleEndian(Int32) Random64.NextBytesBigEndian(Int32) Random64.Fill(Byte[]) Random64.FillLittleEndian(Byte[]) Random64.FillBigEndian(Byte[]) Random64.NextInt() Random64.NextLong() Random._InitialRoll Random.ToString() Random.NextByte(Byte, Byte) Random.NextInt(UInt32, UInt32) Random.NextLong(UInt64, UInt64) Random.NextDouble() Random.NextDouble(Double, Double) Random._NextGaussian Random.NextGaussian(Double, Double, Boolean) Random.NextGamma(Double, Double) Random.Choice<T>(T[]) Random.Choice<T>(T[], Int32) Random.ChoiceAsync<T>(T[], Int32) Random.ChoiceAsync<T>(T[], Int32, CancellationToken) Random.Choice<T>(IEnumerable<T>) Random.Choice<T>(IEnumerable<T>, Int32) Random.ChoiceAsync<T>(IEnumerable<T>, Int32) Random.ChoiceAsync<T>(IEnumerable<T>, Int32, CancellationToken) Random.Sample<T>(T[], Int32) Random.SampleAsync<T>(T[], Int32) Random.SampleAsync<T>(T[], Int32, CancellationToken) Random.Sample<T>(IEnumerable<T>, Int32) Random.SampleAsync<T>(IEnumerable<T>, Int32) Random.SampleAsync<T>(IEnumerable<T>, Int32, CancellationToken) Random.Shuffle<T>(T[]) Random.ShuffleAsync<T>(T[]) Random.ShuffleAsync<T>(T[], CancellationToken) Random.Shuffle<T>(IEnumerable<T>) Random.ShuffleAsync<T>(IEnumerable<T>) Random.ShuffleAsync<T>(IEnumerable<T>, CancellationToken) Random.ShuffleInPlace<T>(T[]) Random.ShuffleInPlaceAsync<T>(T[]) Random.ShuffleInPlaceAsync<T>(T[], CancellationToken) Namespace : Litdex.Security.RNG.PRNG Assembly : Litdex.Security.RNG.dll Syntax public class Xoshiro512StarStar : Xoshiro512Plus, IRNG, IDistribution, ISequence Remarks Source: https://prng.di.unimi.it/xoshiro512starstar.c Constructors | Improve this Doc View Source Xoshiro512StarStar(UInt64, UInt64, UInt64, UInt64, UInt64, UInt64, UInt64, UInt64) Create an instance of Xoshiro512StarStar object. Declaration public Xoshiro512StarStar(ulong seed1 = null, ulong seed2 = null, ulong seed3 = null, ulong seed4 = null, ulong seed5 = null, ulong seed6 = null, ulong seed7 = null, ulong seed8 = null) Parameters Type Name Description System.UInt64 seed1 First RNG seed. System.UInt64 seed2 Second RNG seed. System.UInt64 seed3 Third RNG seed. System.UInt64 seed4 Fourth RNG seed. System.UInt64 seed5 Fifth RNG seed. System.UInt64 seed6 Sixth RNG seed. System.UInt64 seed7 Seventh RNG seed. System.UInt64 seed8 Eighth RNG seed. | Improve this Doc View Source Xoshiro512StarStar(UInt64[]) Create an instance of Xoshiro512StarStar object. Declaration public Xoshiro512StarStar(ulong[] seed) Parameters Type Name Description System.UInt64 [] seed RNG seed. Methods | Improve this Doc View Source AlgorithmName() Declaration public override string AlgorithmName() Returns Type Description System.String Overrides Xoshiro512Plus.AlgorithmName() | Improve this Doc View Source Finalize() Destructor Declaration protected void Finalize() | Improve this Doc View Source Next() Declaration protected override ulong Next() Returns Type Description System.UInt64 Overrides Xoshiro512Plus.Next() Implements IRNG IDistribution ISequence"
  },
  "api/Litdex.Security.RNG.Random.html": {
    "href": "api/Litdex.Security.RNG.Random.html",
    "title": "Class Random | Litdex.Security.RNG",
    "keywords": "Class Random Base class of all random. Inheritance System.Object Random Random32 Random64 Implements IRNG IDistribution ISequence Namespace : Litdex.Security.RNG Assembly : Litdex.Security.RNG.dll Syntax public abstract class Random : object, IRNG, IDistribution, ISequence Fields | Improve this Doc View Source _InitialRoll Amount of roll after the state is initialized or seeded. Declaration protected const byte _InitialRoll = null Field Value Type Description System.Byte | Improve this Doc View Source _NextGaussian Hold a copy of gaussian number. Declaration protected double _NextGaussian Field Value Type Description System.Double Methods | Improve this Doc View Source AlgorithmName() Declaration public virtual string AlgorithmName() Returns Type Description System.String | Improve this Doc View Source Choice<T>(T[]) Declaration public virtual T Choice<T>(T[] items) Parameters Type Name Description T[] items Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source Choice<T>(T[], Int32) Declaration public virtual T[] Choice<T>(T[] items, int select) Parameters Type Name Description T[] items System.Int32 select Returns Type Description T[] Type Parameters Name Description T | Improve this Doc View Source Choice<T>(IEnumerable<T>) Declaration public virtual T Choice<T>(IEnumerable<T> items) Parameters Type Name Description IEnumerable <T> items Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source Choice<T>(IEnumerable<T>, Int32) Declaration public virtual T[] Choice<T>(IEnumerable<T> items, int select) Parameters Type Name Description IEnumerable <T> items System.Int32 select Returns Type Description T[] Type Parameters Name Description T | Improve this Doc View Source ChoiceAsync<T>(T[], Int32) Declaration public virtual Task<T[]> ChoiceAsync<T>(T[] items, int select) Parameters Type Name Description T[] items System.Int32 select Returns Type Description Task <T[]> Type Parameters Name Description T | Improve this Doc View Source ChoiceAsync<T>(T[], Int32, CancellationToken) Declaration public virtual Task<T[]> ChoiceAsync<T>(T[] items, int select, CancellationToken cancellationToken) Parameters Type Name Description T[] items System.Int32 select CancellationToken cancellationToken Returns Type Description Task <T[]> Type Parameters Name Description T | Improve this Doc View Source ChoiceAsync<T>(IEnumerable<T>, Int32) Declaration public virtual Task<T[]> ChoiceAsync<T>(IEnumerable<T> items, int select) Parameters Type Name Description IEnumerable <T> items System.Int32 select Returns Type Description Task <T[]> Type Parameters Name Description T | Improve this Doc View Source ChoiceAsync<T>(IEnumerable<T>, Int32, CancellationToken) Declaration public virtual Task<T[]> ChoiceAsync<T>(IEnumerable<T> items, int select, CancellationToken cancellationToken) Parameters Type Name Description IEnumerable <T> items System.Int32 select CancellationToken cancellationToken Returns Type Description Task <T[]> Type Parameters Name Description T | Improve this Doc View Source Fill(Byte[]) Declaration public abstract void Fill(byte[] bytes) Parameters Type Name Description System.Byte [] bytes | Improve this Doc View Source FillBigEndian(Byte[]) Fill the array with random bytes. Declaration public abstract void FillBigEndian(byte[] bytes) Parameters Type Name Description System.Byte [] bytes Array to fill with random bytes. Remarks order in Big Endian. | Improve this Doc View Source FillLittleEndian(Byte[]) Fill the array with random bytes. Declaration public abstract void FillLittleEndian(byte[] bytes) Parameters Type Name Description System.Byte [] bytes Array to fill with random bytes. Remarks order in Little Endian. | Improve this Doc View Source NextBoolean() Declaration public abstract bool NextBoolean() Returns Type Description System.Boolean | Improve this Doc View Source NextByte() Declaration public abstract byte NextByte() Returns Type Description System.Byte | Improve this Doc View Source NextByte(Byte, Byte) Declaration public virtual byte NextByte(byte lower, byte upper) Parameters Type Name Description System.Byte lower System.Byte upper Returns Type Description System.Byte | Improve this Doc View Source NextBytes(Int32) Declaration public abstract byte[] NextBytes(int length) Parameters Type Name Description System.Int32 length Returns Type Description System.Byte [] | Improve this Doc View Source NextBytesBigEndian(Int32) Generate array of random bytes from generator. Declaration public abstract byte[] NextBytesBigEndian(int length) Parameters Type Name Description System.Int32 length Requested output length. Returns Type Description System.Byte [] Array of bytes. Remarks order in Big Endian. | Improve this Doc View Source NextBytesLittleEndian(Int32) Generate array of random bytes from generator. Declaration public abstract byte[] NextBytesLittleEndian(int length) Parameters Type Name Description System.Int32 length Requested output length. Returns Type Description System.Byte [] Array of bytes. Remarks order in Little Endian. | Improve this Doc View Source NextDouble() Declaration public virtual double NextDouble() Returns Type Description System.Double | Improve this Doc View Source NextDouble(Double, Double) Declaration public virtual double NextDouble(double lower, double upper) Parameters Type Name Description System.Double lower System.Double upper Returns Type Description System.Double | Improve this Doc View Source NextGamma(Double, Double) Declaration public virtual double NextGamma(double alpha, double beta) Parameters Type Name Description System.Double alpha System.Double beta Returns Type Description System.Double | Improve this Doc View Source NextGaussian(Double, Double, Boolean) Declaration public virtual double NextGaussian(double mean = null, double std = null, bool threadSafe = false) Parameters Type Name Description System.Double mean System.Double std System.Boolean threadSafe Returns Type Description System.Double | Improve this Doc View Source NextInt() Declaration public abstract uint NextInt() Returns Type Description System.UInt32 | Improve this Doc View Source NextInt(UInt32, UInt32) Declaration public virtual uint NextInt(uint lower, uint upper) Parameters Type Name Description System.UInt32 lower System.UInt32 upper Returns Type Description System.UInt32 | Improve this Doc View Source NextLong() Declaration public abstract ulong NextLong() Returns Type Description System.UInt64 | Improve this Doc View Source NextLong(UInt64, UInt64) Declaration public virtual ulong NextLong(ulong lower, ulong upper) Parameters Type Name Description System.UInt64 lower System.UInt64 upper Returns Type Description System.UInt64 | Improve this Doc View Source Reseed() Declaration public abstract void Reseed() | Improve this Doc View Source Sample<T>(T[], Int32) Declaration public virtual T[] Sample<T>(T[] items, int select) Parameters Type Name Description T[] items System.Int32 select Returns Type Description T[] Type Parameters Name Description T | Improve this Doc View Source Sample<T>(IEnumerable<T>, Int32) Declaration public virtual T[] Sample<T>(IEnumerable<T> items, int select) Parameters Type Name Description IEnumerable <T> items System.Int32 select Returns Type Description T[] Type Parameters Name Description T | Improve this Doc View Source SampleAsync<T>(T[], Int32) Declaration public virtual Task<T[]> SampleAsync<T>(T[] items, int select) Parameters Type Name Description T[] items System.Int32 select Returns Type Description Task <T[]> Type Parameters Name Description T | Improve this Doc View Source SampleAsync<T>(T[], Int32, CancellationToken) Declaration public virtual Task<T[]> SampleAsync<T>(T[] items, int select, CancellationToken cancellationToken) Parameters Type Name Description T[] items System.Int32 select CancellationToken cancellationToken Returns Type Description Task <T[]> Type Parameters Name Description T | Improve this Doc View Source SampleAsync<T>(IEnumerable<T>, Int32) Declaration public virtual Task<T[]> SampleAsync<T>(IEnumerable<T> items, int select) Parameters Type Name Description IEnumerable <T> items System.Int32 select Returns Type Description Task <T[]> Type Parameters Name Description T | Improve this Doc View Source SampleAsync<T>(IEnumerable<T>, Int32, CancellationToken) Declaration public virtual Task<T[]> SampleAsync<T>(IEnumerable<T> items, int select, CancellationToken cancellationToken) Parameters Type Name Description IEnumerable <T> items System.Int32 select CancellationToken cancellationToken Returns Type Description Task <T[]> Type Parameters Name Description T | Improve this Doc View Source Shuffle<T>(T[]) Declaration public virtual T[] Shuffle<T>(T[] items) Parameters Type Name Description T[] items Returns Type Description T[] Type Parameters Name Description T | Improve this Doc View Source Shuffle<T>(IEnumerable<T>) Declaration public virtual T[] Shuffle<T>(IEnumerable<T> items) Parameters Type Name Description IEnumerable <T> items Returns Type Description T[] Type Parameters Name Description T | Improve this Doc View Source ShuffleAsync<T>(T[]) Declaration public virtual Task<T[]> ShuffleAsync<T>(T[] items) Parameters Type Name Description T[] items Returns Type Description Task <T[]> Type Parameters Name Description T | Improve this Doc View Source ShuffleAsync<T>(T[], CancellationToken) Declaration public virtual Task<T[]> ShuffleAsync<T>(T[] items, CancellationToken cancellationToken) Parameters Type Name Description T[] items CancellationToken cancellationToken Returns Type Description Task <T[]> Type Parameters Name Description T | Improve this Doc View Source ShuffleAsync<T>(IEnumerable<T>) Declaration public virtual Task<T[]> ShuffleAsync<T>(IEnumerable<T> items) Parameters Type Name Description IEnumerable <T> items Returns Type Description Task <T[]> Type Parameters Name Description T | Improve this Doc View Source ShuffleAsync<T>(IEnumerable<T>, CancellationToken) Declaration public virtual Task<T[]> ShuffleAsync<T>(IEnumerable<T> items, CancellationToken cancellationToken) Parameters Type Name Description IEnumerable <T> items CancellationToken cancellationToken Returns Type Description Task <T[]> Type Parameters Name Description T | Improve this Doc View Source ShuffleInPlace<T>(T[]) Declaration public virtual void ShuffleInPlace<T>(T[] items) Parameters Type Name Description T[] items Type Parameters Name Description T | Improve this Doc View Source ShuffleInPlaceAsync<T>(T[]) Declaration public virtual Task ShuffleInPlaceAsync<T>(T[] items) Parameters Type Name Description T[] items Returns Type Description Task Type Parameters Name Description T | Improve this Doc View Source ShuffleInPlaceAsync<T>(T[], CancellationToken) Declaration public virtual Task ShuffleInPlaceAsync<T>(T[] items, CancellationToken cancellationToken) Parameters Type Name Description T[] items CancellationToken cancellationToken Returns Type Description Task Type Parameters Name Description T | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Implements IRNG IDistribution ISequence"
  },
  "api/Litdex.Security.RNG.Random32.html": {
    "href": "api/Litdex.Security.RNG.Random32.html",
    "title": "Class Random32 | Litdex.Security.RNG",
    "keywords": "Class Random32 Base class for Random Number Generator that the internal state produces 32 bit output. Inheritance System.Object Random Random32 JSF32 MiddleSquareWeylSequence PcgXshRr32 RomuMono32 RomuQuad32 RomuTrio32 SFC32 Squares Tyche Implements IRNG IDistribution ISequence Inherited Members Random._InitialRoll Random.Reseed() Random.ToString() Random.NextByte(Byte, Byte) Random.NextInt(UInt32, UInt32) Random.NextLong(UInt64, UInt64) Random.NextDouble() Random.NextDouble(Double, Double) Random._NextGaussian Random.NextGaussian(Double, Double, Boolean) Random.NextGamma(Double, Double) Random.Choice<T>(T[]) Random.Choice<T>(T[], Int32) Random.ChoiceAsync<T>(T[], Int32) Random.ChoiceAsync<T>(T[], Int32, CancellationToken) Random.Choice<T>(IEnumerable<T>) Random.Choice<T>(IEnumerable<T>, Int32) Random.ChoiceAsync<T>(IEnumerable<T>, Int32) Random.ChoiceAsync<T>(IEnumerable<T>, Int32, CancellationToken) Random.Sample<T>(T[], Int32) Random.SampleAsync<T>(T[], Int32) Random.SampleAsync<T>(T[], Int32, CancellationToken) Random.Sample<T>(IEnumerable<T>, Int32) Random.SampleAsync<T>(IEnumerable<T>, Int32) Random.SampleAsync<T>(IEnumerable<T>, Int32, CancellationToken) Random.Shuffle<T>(T[]) Random.ShuffleAsync<T>(T[]) Random.ShuffleAsync<T>(T[], CancellationToken) Random.Shuffle<T>(IEnumerable<T>) Random.ShuffleAsync<T>(IEnumerable<T>) Random.ShuffleAsync<T>(IEnumerable<T>, CancellationToken) Random.ShuffleInPlace<T>(T[]) Random.ShuffleInPlaceAsync<T>(T[]) Random.ShuffleInPlaceAsync<T>(T[], CancellationToken) Namespace : Litdex.Security.RNG Assembly : Litdex.Security.RNG.dll Syntax public abstract class Random32 : Random, IRNG, IDistribution, ISequence Fields | Improve this Doc View Source _Size and is 4 bytes. Declaration protected const byte _Size = null Field Value Type Description System.Byte | Improve this Doc View Source _State The internal state of RNG. Declaration protected uint[] _State Field Value Type Description System.UInt32 [] Methods | Improve this Doc View Source AlgorithmName() Declaration public override string AlgorithmName() Returns Type Description System.String Overrides Random.AlgorithmName() | Improve this Doc View Source Fill(Byte[]) Declaration public override void Fill(byte[] bytes) Parameters Type Name Description System.Byte [] bytes Overrides Random.Fill(Byte[]) | Improve this Doc View Source FillBigEndian(Byte[]) Declaration public override void FillBigEndian(byte[] bytes) Parameters Type Name Description System.Byte [] bytes Overrides Random.FillBigEndian(Byte[]) | Improve this Doc View Source FillLittleEndian(Byte[]) Declaration public override void FillLittleEndian(byte[] bytes) Parameters Type Name Description System.Byte [] bytes Overrides Random.FillLittleEndian(Byte[]) | Improve this Doc View Source Next() Generate next random number. Declaration protected abstract uint Next() Returns Type Description System.UInt32 A 32-bit unsigned integer. | Improve this Doc View Source NextBoolean() Declaration public override bool NextBoolean() Returns Type Description System.Boolean Overrides Random.NextBoolean() | Improve this Doc View Source NextByte() Declaration public override byte NextByte() Returns Type Description System.Byte Overrides Random.NextByte() | Improve this Doc View Source NextBytes(Int32) Declaration public override byte[] NextBytes(int length) Parameters Type Name Description System.Int32 length Returns Type Description System.Byte [] Overrides Random.NextBytes(Int32) | Improve this Doc View Source NextBytesBigEndian(Int32) Declaration public override byte[] NextBytesBigEndian(int length) Parameters Type Name Description System.Int32 length Returns Type Description System.Byte [] Overrides Random.NextBytesBigEndian(Int32) | Improve this Doc View Source NextBytesLittleEndian(Int32) Declaration public override byte[] NextBytesLittleEndian(int length) Parameters Type Name Description System.Int32 length Returns Type Description System.Byte [] Overrides Random.NextBytesLittleEndian(Int32) | Improve this Doc View Source NextInt() Declaration public override uint NextInt() Returns Type Description System.UInt32 Overrides Random.NextInt() | Improve this Doc View Source NextLong() Declaration public override ulong NextLong() Returns Type Description System.UInt64 Overrides Random.NextLong() | Improve this Doc View Source SetSeed(UInt32[]) Set Litdex.Security.RNG internal state manually. Declaration public virtual void SetSeed(params uint[] seed) Parameters Type Name Description System.UInt32 [] seed Number to generate the random numbers. Implements IRNG IDistribution ISequence"
  },
  "api/Litdex.Security.RNG.Random64.html": {
    "href": "api/Litdex.Security.RNG.Random64.html",
    "title": "Class Random64 | Litdex.Security.RNG",
    "keywords": "Class Random64 Base class for Random Number Generator that the internal state produces 64 bit output. Inheritance System.Object Random Random64 GJrand64 JSF64 PcgRxsMXs64 RomuDuo RomuQuad RomuTrio Seiran SFC64 Shioi Shishua SplitMix64 Wyrand Xoroshiro128Plus Xoshiro256Plus Xoshiro512Plus Implements IRNG IDistribution ISequence Inherited Members Random._InitialRoll Random.Reseed() Random.ToString() Random.NextByte(Byte, Byte) Random.NextInt(UInt32, UInt32) Random.NextLong(UInt64, UInt64) Random.NextDouble() Random.NextDouble(Double, Double) Random._NextGaussian Random.NextGaussian(Double, Double, Boolean) Random.NextGamma(Double, Double) Random.Choice<T>(T[]) Random.Choice<T>(T[], Int32) Random.ChoiceAsync<T>(T[], Int32) Random.ChoiceAsync<T>(T[], Int32, CancellationToken) Random.Choice<T>(IEnumerable<T>) Random.Choice<T>(IEnumerable<T>, Int32) Random.ChoiceAsync<T>(IEnumerable<T>, Int32) Random.ChoiceAsync<T>(IEnumerable<T>, Int32, CancellationToken) Random.Sample<T>(T[], Int32) Random.SampleAsync<T>(T[], Int32) Random.SampleAsync<T>(T[], Int32, CancellationToken) Random.Sample<T>(IEnumerable<T>, Int32) Random.SampleAsync<T>(IEnumerable<T>, Int32) Random.SampleAsync<T>(IEnumerable<T>, Int32, CancellationToken) Random.Shuffle<T>(T[]) Random.ShuffleAsync<T>(T[]) Random.ShuffleAsync<T>(T[], CancellationToken) Random.Shuffle<T>(IEnumerable<T>) Random.ShuffleAsync<T>(IEnumerable<T>) Random.ShuffleAsync<T>(IEnumerable<T>, CancellationToken) Random.ShuffleInPlace<T>(T[]) Random.ShuffleInPlaceAsync<T>(T[]) Random.ShuffleInPlaceAsync<T>(T[], CancellationToken) Namespace : Litdex.Security.RNG Assembly : Litdex.Security.RNG.dll Syntax public abstract class Random64 : Random, IRNG, IDistribution, ISequence Fields | Improve this Doc View Source _Size and is 8 bytes. Declaration protected const byte _Size = null Field Value Type Description System.Byte | Improve this Doc View Source _State The internal state of RNG. Declaration protected ulong[] _State Field Value Type Description System.UInt64 [] Methods | Improve this Doc View Source AlgorithmName() Declaration public override string AlgorithmName() Returns Type Description System.String Overrides Random.AlgorithmName() | Improve this Doc View Source Fill(Byte[]) Declaration public override void Fill(byte[] bytes) Parameters Type Name Description System.Byte [] bytes Overrides Random.Fill(Byte[]) | Improve this Doc View Source FillBigEndian(Byte[]) Declaration public override void FillBigEndian(byte[] bytes) Parameters Type Name Description System.Byte [] bytes Overrides Random.FillBigEndian(Byte[]) | Improve this Doc View Source FillLittleEndian(Byte[]) Declaration public override void FillLittleEndian(byte[] bytes) Parameters Type Name Description System.Byte [] bytes Overrides Random.FillLittleEndian(Byte[]) | Improve this Doc View Source Next() Generate next random number. Declaration protected abstract ulong Next() Returns Type Description System.UInt64 A 64-bit unsigned integer. | Improve this Doc View Source NextBoolean() Declaration public override bool NextBoolean() Returns Type Description System.Boolean Overrides Random.NextBoolean() | Improve this Doc View Source NextByte() Declaration public override byte NextByte() Returns Type Description System.Byte Overrides Random.NextByte() | Improve this Doc View Source NextBytes(Int32) Declaration public override byte[] NextBytes(int length) Parameters Type Name Description System.Int32 length Returns Type Description System.Byte [] Overrides Random.NextBytes(Int32) | Improve this Doc View Source NextBytesBigEndian(Int32) Declaration public override byte[] NextBytesBigEndian(int length) Parameters Type Name Description System.Int32 length Returns Type Description System.Byte [] Overrides Random.NextBytesBigEndian(Int32) | Improve this Doc View Source NextBytesLittleEndian(Int32) Declaration public override byte[] NextBytesLittleEndian(int length) Parameters Type Name Description System.Int32 length Returns Type Description System.Byte [] Overrides Random.NextBytesLittleEndian(Int32) | Improve this Doc View Source NextInt() Declaration public override uint NextInt() Returns Type Description System.UInt32 Overrides Random.NextInt() | Improve this Doc View Source NextLong() Declaration public override ulong NextLong() Returns Type Description System.UInt64 Overrides Random.NextLong() | Improve this Doc View Source SetSeed(UInt64[]) Set Litdex.Security.RNG internal state manually. Declaration public virtual void SetSeed(params ulong[] seed) Parameters Type Name Description System.UInt64 [] seed Number to generate the random numbers. Implements IRNG IDistribution ISequence"
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Add your introductions here! | Litdex.Security.RNG",
    "keywords": "Add your introductions here!"
  },
  "index.html": {
    "href": "index.html",
    "title": "Litdex.Security.RNG | Litdex.Security.RNG",
    "keywords": "Litdex.Security.RNG Library that provide basic random generator function and was inspired from Python random.py . Litdex.Security.RNG have already provide some basic random algorithm, so you can use it immediately rather than implement it yourself. But, still Litdex.Security.RNG created with extensibility in mind, so you can implement your own random generator with this library . Note: This is sub-modlue of Litdex . Download This package contains: Currently Litdex.Security.RNG support this algorithm: GJrand JSF Middle Square Weyl Sequence PCG Romu SFC (Chris Doty-Humphrey's Chaotic PRNG) Seiran Shioi Shishua SplitMix64 Squares Tyche Wyrand Xoroshiro and Xoshiro All of the algorithm have passing Practrand or Test01 test. But I've never test it individually, the author who is said that their algorithm past Practrand or Test01. You can check in this website \"PRNG Battle Royale: 47 PRNGs � 9 consoles\" , the writer have tested some of the algorithm that have been implemented. How to use For detailed use, read How to use or Documentation The simple way to use // create rng object var rng = new Xoroshiro128plus(); // get random integer var randomInt = rng.NextInt(); Want to create your own RNG?? Then read Custom RNG Benchmark 32-bit RNG BenchmarkDotNet=v0.13.1, OS=Windows 10.0.18363.1500 (1909/November2019Update/19H2) AMD FX-8800P Radeon R7, 12 Compute Cores 4C+8G, 1 CPU, 4 logical and 4 physical cores .NET SDK=5.0.401 [Host] : .NET 5.0.10 (5.0.1021.41214), X64 RyuJIT MediumRun : .NET 5.0.10 (5.0.1021.41214), X64 RyuJIT Job=MediumRun IterationCount=15 LaunchCount=2 WarmupCount=10 Method rand Mean Error StdDev Min Max Ratio RatioSD Rank Gen 0 Allocated System.Random ? 5,320.380 ns 30.5306 ns 45.6968 ns 5,256.942 ns 5,395.361 ns 1.00 0.00 1 0.5341 280 B NextInt JSF 32-bit 9.559 ns 0.1051 ns 0.1507 ns 9.291 ns 9.994 ns ? ? 1 - - NextInt JSF 3(...)otate [24] 10.283 ns 0.0942 ns 0.1410 ns 10.099 ns 10.522 ns ? ? 1 - - NextInt Middl(...)uence [27] 12.428 ns 0.0641 ns 0.0920 ns 12.310 ns 12.694 ns ? ? 1 - - NextInt PCG XSH-RR 32-bit 12.805 ns 0.0962 ns 0.1380 ns 12.547 ns 13.106 ns ? ? 1 - - NextInt PCG XSH-RS 32-bit 10.849 ns 0.6821 ns 1.0210 ns 8.613 ns 12.409 ns ? ? 1 - - NextInt Romu Mono 32-bit 11.347 ns 0.0834 ns 0.1169 ns 11.136 ns 11.532 ns ? ? 1 - - NextInt Romu Quad 32-bit 10.316 ns 0.1106 ns 0.1621 ns 10.075 ns 10.737 ns ? ? 1 - - NextInt Romu Trio 32-bit 13.664 ns 0.1315 ns 0.1886 ns 13.373 ns 14.166 ns ? ? 1 - - NextInt SFC 32-bit 10.270 ns 0.0651 ns 0.0934 ns 10.090 ns 10.427 ns ? ? 1 - - NextInt Squares 13.174 ns 0.0892 ns 0.1307 ns 12.936 ns 13.476 ns ? ? 1 - - NextInt Tyche 49.391 ns 0.2749 ns 0.4114 ns 48.846 ns 49.951 ns ? ? 1 - - NextInt Tyche-i 20.308 ns 0.1033 ns 0.1481 ns 20.078 ns 20.541 ns ? ? 1 - - 64-bit RNG BenchmarkDotNet=v0.13.1, OS=Windows 10.0.18363.1500 (1909/November2019Update/19H2) AMD FX-8800P Radeon R7, 12 Compute Cores 4C+8G, 1 CPU, 4 logical and 4 physical cores .NET SDK=5.0.401 [Host] : .NET 5.0.10 (5.0.1021.41214), X64 RyuJIT MediumRun : .NET 5.0.10 (5.0.1021.41214), X64 RyuJIT Job=MediumRun IterationCount=15 LaunchCount=2 WarmupCount=10 Method rand Mean Error StdDev Min Max Rank Gen 0 Allocated NextLong Romu Duo 64-bit 5.547 ns 0.0658 ns 0.0985 ns 5.356 ns 5.748 ns 1 - - NextLong Romu Duo Jr 64-bit 5.583 ns 0.0647 ns 0.0948 ns 5.415 ns 5.853 ns 1 - - NextLong Shioi 5.779 ns 0.0587 ns 0.0861 ns 5.635 ns 5.930 ns 2 - - NextLong Seiran 5.815 ns 0.0835 ns 0.1198 ns 5.623 ns 6.113 ns 2 - - NextLong Xoroshiro 128+ 5.835 ns 0.0745 ns 0.1068 ns 5.632 ns 6.007 ns 2 - - NextLong Xoroshiro 128** 5.965 ns 0.0624 ns 0.0914 ns 5.841 ns 6.186 ns 3 - - NextLong PCG RXS-M-XS 64-bit 6.162 ns 0.0653 ns 0.0957 ns 5.981 ns 6.345 ns 4 - - NextLong SplitMix64 6.751 ns 0.0550 ns 0.0753 ns 6.642 ns 6.948 ns 5 - - NextLong Xoroshiro 128++ 6.812 ns 0.5558 ns 0.8318 ns 5.865 ns 7.779 ns 5 - - NextLong Romu Trio 64-bit 7.095 ns 0.0581 ns 0.0851 ns 6.964 ns 7.266 ns 5 - - NextLong Romu Quad 64-bit 7.684 ns 0.0862 ns 0.1291 ns 7.498 ns 7.907 ns 6 - - NextLong SFC 64-bit 7.842 ns 0.0950 ns 0.1393 ns 7.582 ns 8.023 ns 7 - - NextLong JSF 64-bit 8.376 ns 0.1285 ns 0.1923 ns 8.171 ns 8.872 ns 8 - - NextLong Xoshiro 256** 9.460 ns 0.0708 ns 0.0993 ns 9.350 ns 9.676 ns 9 - - NextLong Xoshiro 256+ 9.494 ns 0.0752 ns 0.1125 ns 9.316 ns 9.661 ns 9 - - NextLong Xoshiro 256++ 9.692 ns 0.0936 ns 0.1401 ns 9.482 ns 9.940 ns 10 - - NextLong Wyrand 11.949 ns 0.1327 ns 0.1986 ns 11.639 ns 12.344 ns 11 - - NextLong Xoshiro 512++ 17.201 ns 0.1145 ns 0.1713 ns 16.926 ns 17.487 ns 12 - - NextLong Xoshiro 512+ 17.292 ns 0.2144 ns 0.3005 ns 16.951 ns 17.872 ns 12 - - NextLong Xoshiro 512** 17.425 ns 0.2050 ns 0.3069 ns 16.905 ns 17.904 ns 12 - - NextLong Gjrand 25.934 ns 0.2945 ns 0.4408 ns 24.915 ns 26.314 ns 13 - - NextLong Shishua 30.672 ns 0.4714 ns 0.6909 ns 29.746 ns 31.842 ns 14 0.0306 16 B Warning For method that generate an arbitary byte array, like method NextBytes . var rng = new Xoroshiro128plus(); var bytes = rng.NextBytes(10); Litdex generate the array using multiple uint or ulong , each uint or ulong will converted into byte array. When converted to byte array, Litdex order the byte based on the system endianess. Then each converted byte array will be concated with other byte array. Contribute Feel free to open new issue or PR . Donation Like this library? Please consider donation"
  }
}