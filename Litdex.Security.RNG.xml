<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Litdex.Security.RNG</name>
    </assembly>
    <members>
        <member name="T:Litdex.Security.RNG.IRNG">
            <summary>
            Interface structure for Random Number Generator (RNG).
            </summary>
        </member>
        <member name="M:Litdex.Security.RNG.IRNG.AlgorithmName">
            <summary>
            The name of the algorithm this generator implements.
            </summary>
            <returns>
            The name of this RNG.
            </returns>
        </member>
        <member name="M:Litdex.Security.RNG.IRNG.Reseed">
            <summary>
            Seed with <see cref="T:System.Security.Cryptography.RNGCryptoServiceProvider"/>.
            </summary>
        </member>
        <member name="M:Litdex.Security.RNG.IRNG.NextBoolean">
            <summary>
            Generate <see cref="T:System.Boolean"/> value from generator.
            </summary>
            <returns>
            <see langword="true"/> or <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Litdex.Security.RNG.IRNG.NextByte">
            <summary>
            Generate <see cref="T:System.Byte"/> value from generator.
            </summary>
            <returns>
            Random <see cref="T:System.Byte"/>.
            </returns>
        </member>
        <member name="M:Litdex.Security.RNG.IRNG.NextByte(System.Byte,System.Byte)">
            <summary>
            Generate <see cref="T:System.Byte"/> value between 
            lower bound and upper bound from generator.
            </summary>
            <param name="lower">
            Lower bound or expected minimum value.
            </param>
            <param name="upper">
            Upper bound or ecpected maximum value.
            </param>
            <returns>
            <see cref="T:System.Byte"/> value between lower bound and upper bound.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Lower bound is greater than or equal to upper bound.
            </exception>
        </member>
        <member name="M:Litdex.Security.RNG.IRNG.NextBytes(System.Int32)">
            <summary>
            Generate random byte[] value from generator.
            </summary>
            <param name="length">
            Requested output length.
            </param>
            <returns>
            Array of bytes.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The requested output size can't lower than 1.
            </exception>
        </member>
        <member name="M:Litdex.Security.RNG.IRNG.NextInt">
            <summary>
            Generate <see cref="T:System.UInt32"/> value from generator.
            </summary>
            <returns>
            A 32-bit unsigned integer.
            </returns>
        </member>
        <member name="M:Litdex.Security.RNG.IRNG.NextInt(System.UInt32,System.UInt32)">
            <summary>
            Generate <see cref="T:System.UInt32"/> value between 
            lower bound and upper bound from generator.
            </summary>
            <param name="lower">
            Lower bound or expected minimum value.
            </param>
            <param name="upper">
            Upper bound or ecpected maximum value.
            </param>
            <returns>
            <see cref="T:System.UInt32"/> value between lower bound and upper bound.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Lower bound is greater than or equal to upper bound.
            </exception>
        </member>
        <member name="M:Litdex.Security.RNG.IRNG.NextLong">
            <summary>
            Generate <see cref="T:System.UInt64"/> value from generator. 
            </summary>
            <returns>
            A 64-bit unsigned integer.
            </returns>
        </member>
        <member name="M:Litdex.Security.RNG.IRNG.NextLong(System.UInt64,System.UInt64)">
            <summary>
            Generate <see cref="T:System.UInt64"/> value between 
            lower bound and upper bound from generator. 
            </summary>
            <param name="lower">
            Lower bound or expected minimum value.
            </param>
            <param name="upper">
            Upper bound or ecpected maximum value.
            </param>
            <returns>
            <see cref="T:System.UInt64"/> value lower bound and upper bound.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Lower bound is greater than or equal to upper bound.
            </exception>
        </member>
        <member name="M:Litdex.Security.RNG.IRNG.NextDouble">
            <summary>
            Generate <see cref="T:System.Double"/> value from generator.
            </summary>
            <returns>
            A 64-bit floating point.
            </returns>
        </member>
        <member name="M:Litdex.Security.RNG.IRNG.NextDouble(System.Double,System.Double)">
            <summary>
            Generate <see cref="T:System.Double"/> value between 
            lower bound and upper bound from generator.
            </summary>
            <param name="lower">
            Lower bound or expected minimum value.
            </param>
            <param name="upper">
            Upper bound or ecpected maximum value.
            </param>
            <returns>
            <see cref="T:System.Double"/> value between lower bound and upper bound.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Lower bound is greater than or equal to upper bound.
            </exception>
        </member>
        <member name="M:Litdex.Security.RNG.IRNG.Choice``1(``0[])">
            <summary>
            Select one element randomly.
            </summary>
            <typeparam name="T">
            Data type
            </typeparam>
            <param name="items">
            Set of items to choose.
            </param>
            <returns>
            Random element from the given sets.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	The items is null, empty or not initialized. 
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	The items length or size can't be greater than int.MaxValue.
            </exception>
        </member>
        <member name="M:Litdex.Security.RNG.IRNG.Choice``1(``0[],System.Int32)">
            <summary>
            Select abritary element randomly.
            </summary>
            <typeparam name="T">
            Data type
            </typeparam>
            <param name="items">
            Set of items to choose.
            </param>
            <param name="select">
            The desired amount to select.
            </param>
            <returns>
            Multiple random elements from the given sets.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	The items is null, empty or not initialized. 
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <list type="bullet">
            	<item>
            	The number of elements to be retrieved is negative or less than 1.
            	</item>
            	<item>
            	The number of elements to be retrieved exceeds the items size.
            	</item>
            </list>
            </exception>
        </member>
        <member name="M:Litdex.Security.RNG.IRNG.Choice``1(System.Collections.Generic.IList{``0})">
            <summary>
            Select one element randomly.
            </summary>
            <typeparam name="T">
            Data type
            </typeparam>
            <param name="items">
            Set of items to choose.
            </param>
            <returns>
            Random element from the given sets.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	The items is null, empty or not initialized. 
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	The items length or size can't be greater than int.MaxValue.
            </exception>
        </member>
        <member name="M:Litdex.Security.RNG.IRNG.Choice``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            Select abritary element randomly.
            </summary>
            <typeparam name="T">
            Data type
            </typeparam>
            <param name="items">
            Set of items to choose.
            </param>
            <param name="select">
            The desired amount to select.
            </param>
            <returns>
            Multiple random elements from the given sets.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	The items is null, empty or not initialized. 
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <list type="bullet">
            	<item>
            	The number of elements to be retrieved is negative or less than 1.
            	</item>
            	<item>
            	The number of elements to be retrieved exceeds the items size.
            	</item>
            </list>
            </exception>
        </member>
        <member name="M:Litdex.Security.RNG.IRNG.Sample``1(``0[],System.Int32)">
            <summary>
            Select abritary distinct element randomly.
            </summary>
            <typeparam name="T">
            Data type
            </typeparam>
            <param name="items">
            Set of items to choose.
            </param>
            <param name="k">
            The desired amount to select.
            </param>
            <returns>
            Multiple random elements from the given sets.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	The items is null, empty or not initialized. 
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <list type="bullet">
            	<item>
            	The number of elements to be retrieved is negative or less than 1.
            	</item>
            	<item>
            	The number of elements to be retrieved exceeds the items size.
            	</item>
            </list>
            </exception>
        </member>
        <member name="M:Litdex.Security.RNG.IRNG.SampleAsync``1(``0[],System.Int32)">
            <summary>
            Select abritary distinct element randomly.
            </summary>
            <remarks>
            Used for large data, objects or arrays.
            </remarks>
            <typeparam name="T">
            Data type
            </typeparam>
            <param name="items">
            Set of items to choose.
            </param>
            <param name="k">
            The desired amount to select.
            </param>
            <returns>
            Multiple random elements from the given sets.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	The items is null, empty or not initialized. 
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <list type="bullet">
            	<item>
            	The number of elements to be retrieved is negative or less than 1.
            	</item>
            	<item>
            	The number of elements to be retrieved exceeds the items size.
            	</item>
            </list>
            </exception>
        </member>
        <member name="M:Litdex.Security.RNG.IRNG.Shuffle``1(``0[])">
            <summary>
            Shuffle items with Fisher-Yates shuffle.
            </summary>
            <typeparam name="T">
            Data type
            </typeparam>
            <param name="items">
            Set of items to shuffle.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	The items is null, empty or not initialized. 
            </exception>
        </member>
        <member name="M:Litdex.Security.RNG.IRNG.ShuffleAsync``1(``0[])">
            <summary>
            Shuffle items with Fisher-Yates shuffle.
            </summary>
            <remarks>
            Used for large data, objects or arrays.
            </remarks>
            <typeparam name="T">
            Data type
            </typeparam>
            <param name="items">
            Set of items to shuffle.
            </param>
            <returns>
            Shuffled items.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	The items is null, empty or not initialized. 
            </exception>
        </member>
        <member name="T:Litdex.Security.RNG.PRNG.GJrand64">
            <summary>
            Implementation of David Blackman's GJrand PRNG(s)
            </summary>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.GJrand64.Next">
            <inheritdoc/>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.GJrand64.AlgorithmName">
            <inheritdoc/>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.GJrand64.Reseed">
            <inheritdoc/>
        </member>
        <member name="T:Litdex.Security.RNG.PRNG.JSF32">
            <summary>
            Implementation of a Bob Jenkins Small Fast (Noncryptographic) PRNGs.
            
            http://burtleburtle.net/bob/rand/smallprng.html
            </summary>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.JSF32.#ctor(System.UInt32)">
            <summary>
            Constructor.
            </summary>
            <param name="seed">Your seed.</param>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.JSF32.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.JSF32.Next">
            <inheritdoc/>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.JSF32.Rotate(System.UInt32,System.Int32)">
            <summary>
            Rotate the bit.
            </summary>
            <param name="value">Number to rotate.</param>
            <param name="shift">Bit to rotate.</param>
            <returns></returns>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.JSF32.AlgorithmName">
            <inheritdoc/>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.JSF32.Reseed">
            <inheritdoc/>
        </member>
        <member name="T:Litdex.Security.RNG.PRNG.JSF32t">
            <summary>
            Improved version of <see cref="T:Litdex.Security.RNG.PRNG.JSF32"/> with 3 rotate.
            </summary>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.JSF32t.#ctor(System.UInt32)">
            <summary>
            Constructor.
            </summary>
            <param name="seed">Your seed.</param>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.JSF32t.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.JSF32t.Next">
            <inheritdoc/>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.JSF32t.AlgorithmName">
            <inheritdoc/>
        </member>
        <member name="T:Litdex.Security.RNG.PRNG.JSF64">
            <summary>
            Implementation of a Bob Jenkins Small Fast (Noncryptographic) PRNGs.
            
            http://burtleburtle.net/bob/rand/smallprng.html
            </summary>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.JSF64.#ctor(System.UInt64)">
            <summary>
            Constructor.
            </summary>
            <param name="seed">Your seed.</param>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.JSF64.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.JSF64.Next">
            <inheritdoc/>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.JSF64.Rotate(System.UInt64,System.Int32)">
            <summary>
            Rotate the bit.
            </summary>
            <param name="value">Number to rotate.</param>
            <param name="shift">Bit to rotate.</param>
            <returns></returns>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.JSF64.AlgorithmName">
            <inheritdoc/>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.JSF64.Reseed">
            <inheritdoc/>
        </member>
        <member name="T:Litdex.Security.RNG.PRNG.MiddleSquareWeylSequence">
            <summary>
            Improved version from Middle Square Method
            invented by John Von Neumann. 
            <list type="bullet">
            <item>https://arxiv.org/abs/1704.00358</item>
            </list>
            </summary>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.MiddleSquareWeylSequence.#ctor(System.UInt64)">
            <summary>
            Constructor.
            </summary>
            <param name="seed">Your seed.</param>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.MiddleSquareWeylSequence.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.MiddleSquareWeylSequence.Next">
            <inheritdoc/>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.MiddleSquareWeylSequence.AlgorithmName">
            <inheritdoc/>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.MiddleSquareWeylSequence.Reseed">
            <inheritdoc/>
        </member>
        <member name="T:Litdex.Security.RNG.PRNG.PCG32">
            <summary>
            Implemetation of Permuted Congruential Generator 
            "Minimal C implementation" from 
            http://www.pcg-random.org/download.html
            </summary>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.PCG32.#ctor(System.UInt64,System.UInt64)">
            <summary>
            Default constructor.
            </summary>
            <param name="seed">Seed.</param>
            <param name="increment">Increment.</param>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.PCG32.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.PCG32.Next">
            <inheritdoc/>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.PCG32.AlgorithmName">
            <inheritdoc/>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.PCG32.Reseed">
            <inheritdoc/>
        </member>
        <member name="T:Litdex.Security.RNG.PRNG.RomuDuo">
            <summary>
            Might be faster than RomuTrio due to using fewer registers, but might struggle with massive jobs.
            Est. capacity = 2^61 bytes. Register pressure = 5. State size = 128 bits.
            </summary>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.RomuDuo.#ctor(System.UInt64[])">
            <summary>
            
            </summary>
            <param name="seed"></param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Seed need 2 numbers.
            </exception>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.RomuDuo.Next">
            <inheritdoc/>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.RomuDuo.AlgorithmName">
            <inheritdoc/>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.RomuDuo.Reseed">
            <inheritdoc/>
        </member>
        <member name="T:Litdex.Security.RNG.PRNG.RomuDuoJr">
            <summary>
            The fastest generator using 64-bit arith., but not suited for huge jobs.
            Est. capacity = 2^51 bytes. Register pressure = 4. State size = 128 bits.
            </summary>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.RomuDuoJr.#ctor(System.UInt64[])">
            <summary>
            
            </summary>
            <param name="seed"></param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Seed need 2 numbers.
            </exception>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.RomuDuoJr.Next">
            <inheritdoc/>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.RomuDuoJr.AlgorithmName">
            <inheritdoc/>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.RomuDuoJr.Reseed">
            <inheritdoc/>
        </member>
        <member name="T:Litdex.Security.RNG.PRNG.RomuMono32">
            <summary>
            32-bit arithmetic: Suitable only up to 2^26 output-values. Outputs 16-bit numbers.
            Fixed period of (2^32)-47. Must be seeded using the romuMono32_init function.
            Capacity = 2^27 bytes. Register pressure = 2. State size = 32 bits.
            </summary>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.RomuMono32.Next">
            <inheritdoc/>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.RomuMono32.AlgorithmName">
            <inheritdoc/>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.RomuMono32.Reseed">
            <inheritdoc/>
        </member>
        <member name="T:Litdex.Security.RNG.PRNG.RomuQuad">
            <summary>
            More robust than anyone could need, but uses more registers than RomuTrio.
            Est. capacity >= 2^90 bytes. Register pressure = 8 (high). State size = 256 bits.
            </summary>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.RomuQuad.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Create <see cref="T:Litdex.Security.RNG.PRNG.RomuQuad32"/> instance.
            </summary>
            <param name="seed1">
            W state.
            </param>
            <param name="seed2">
            X state.
            </param>
            <param name="seed3">
            Y state.
            </param>
            <param name="seed4">
            Z state.
            </param>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.RomuQuad.#ctor(System.UInt32[])">
            <summary>
            Create <see cref="T:Litdex.Security.RNG.PRNG.RomuQuad"/> instance.
            </summary>
            <param name="seed">
            A array of seed numbers.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Seed need 4 numbers.
            </exception>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.RomuQuad.Finalize">
            <summary>
            Clear all seed.
            </summary>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.RomuQuad.Next">
            <inheritdoc/>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.RomuQuad.AlgorithmName">
            <inheritdoc/>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.RomuQuad.Reseed">
            <inheritdoc/>
        </member>
        <member name="T:Litdex.Security.RNG.PRNG.RomuQuad32">
            <summary>
            32-bit arithmetic: Good for general purpose use.
            Est. capacity >= 2^62 bytes. Register pressure = 7. State size = 128 bits.
            </summary>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.RomuQuad32.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Create <see cref="T:Litdex.Security.RNG.PRNG.RomuQuad32"/> instance.
            </summary>
            <param name="seed1">
            W state.
            </param>
            <param name="seed2">
            X state.
            </param>
            <param name="seed3">
            Y state.
            </param>
            <param name="seed4">
            Z state.
            </param>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.RomuQuad32.#ctor(System.UInt32[])">
            <summary>
            Create <see cref="T:Litdex.Security.RNG.PRNG.RomuQuad32"/> instance.
            </summary>
            <param name="seed">
            A array of seed numbers.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Seed need 4 numbers.
            </exception>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.RomuQuad32.Finalize">
            <summary>
            Clear all seed.
            </summary>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.RomuQuad32.Next">
            <inheritdoc/>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.RomuQuad32.AlgorithmName">
            <inheritdoc/>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.RomuQuad32.Reseed">
            <inheritdoc/>
        </member>
        <member name="T:Litdex.Security.RNG.PRNG.RomuTrio">
            <summary>
            Great for general purpose work, including huge jobs.
            Est. capacity = 2^75 bytes. Register pressure = 6. State size = 192 bits.
            </summary>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.RomuTrio.#ctor(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Create <see cref="T:Litdex.Security.RNG.PRNG.RomuTrio"/> instance.
            </summary>
            <param name="seed1">
            X state.
            </param>
            <param name="seed2">
            Y state.
            </param>
            <param name="seed3">
            Z state.
            </param>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.RomuTrio.#ctor(System.UInt32[])">
            <summary>
            Create <see cref="T:Litdex.Security.RNG.PRNG.RomuTrio"/> instance.
            </summary>
            <param name="seed">
            A array of seed numbers.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Seed need 3 numbers.
            </exception>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.RomuTrio.Finalize">
            <summary>
            Clear all seed.
            </summary>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.RomuTrio.Next">
            <inheritdoc/>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.RomuTrio.AlgorithmName">
            <inheritdoc/>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.RomuTrio.Reseed">
            <inheritdoc/>
        </member>
        <member name="T:Litdex.Security.RNG.PRNG.RomuTrio32">
            <summary>
            32-bit arithmetic: Good for general purpose use, except for huge jobs.
            Est. capacity >= 2^53 bytes. Register pressure = 5. State size = 96 bits.
            </summary>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.RomuTrio32.#ctor(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Create <see cref="T:Litdex.Security.RNG.PRNG.RomuTrio32"/> instance.
            </summary>
            <param name="seed1">
            X state.
            </param>
            <param name="seed2">
            Y state.
            </param>
            <param name="seed3">
            Z state.
            </param>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.RomuTrio32.#ctor(System.UInt32[])">
            <summary>
            Create <see cref="T:Litdex.Security.RNG.PRNG.RomuTrio32"/> instance.
            </summary>
            <param name="seed">
            Rng seed.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Seed nedd 3 numbers.
            </exception>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.RomuTrio32.Next">
            <inheritdoc/>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.RomuTrio32.AlgorithmName">
            <inheritdoc/>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.RomuTrio32.Reseed">
            <inheritdoc/>
        </member>
        <member name="T:Litdex.Security.RNG.PRNG.SplitMix64">
            <summary>
            SplitMix64 PRNG Algorithm.
            </summary>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.SplitMix64.#ctor(System.UInt64)">
            <summary>
            Constructor.
            </summary>
            <param name="seed"></param>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.SplitMix64.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.SplitMix64.Next">
            <inheritdoc/>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.SplitMix64.AlgorithmName">
            <inheritdoc/>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.SplitMix64.Reseed">
            <inheritdoc/>
        </member>
        <member name="T:Litdex.Security.RNG.PRNG.Squares">
            <summary>
            Counter-based RNG based on <see cref="T:Litdex.Security.RNG.PRNG.MiddleSquareWeylSequence"/>
            
            <list type="bullet">
            	<item>https://arxiv.org/pdf/2004.06278.pdf</item>
            </list>
            </summary>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.Squares.#ctor(System.UInt64,System.UInt64)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.Squares.Next">
            <inheritdoc/>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.Squares.Next(System.UInt64,System.UInt64)">
            <summary>
            Generate next random number.
            </summary>
            <param name="ctr">Counter-based.</param>
            <param name="key">Spesific key.</param>
            <returns></returns>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.Squares.AlgorithmName">
            <inheritdoc/>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.Squares.Reseed">
            <inheritdoc/>
        </member>
        <member name="T:Litdex.Security.RNG.PRNG.Tyche">
            <summary>
            <see cref="T:Litdex.Security.RNG.PRNG.Tyche"/> is based on ChaCha's quarter-round.
            </summary>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.Tyche.Next">
            <inheritdoc/>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.Tyche.Init(System.UInt64,System.UInt32)">
            <summary>
            Initialzied internal state.
            </summary>
            <param name="seed"></param>
            <param name="idx"></param>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.Tyche.Mix">
            <summary>
            Update internal state based on quater round function of ChaCha stream chiper.
            </summary>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.Tyche.AlgorithmName">
            <inheritdoc/>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.Tyche.Reseed">
            <inheritdoc/>
        </member>
        <member name="T:Litdex.Security.RNG.PRNG.Tychei">
            <summary>
            Inverse <see cref="T:Litdex.Security.RNG.PRNG.Tyche"/>.
            </summary>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.Tychei.Next">
            <inheritdoc/>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.Tychei.Init(System.UInt64,System.UInt32)">
            <summary>
            Initialzied internal state.
            </summary>
            <param name="seed"></param>
            <param name="idx"></param>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.Tychei.Mix_i">
            <summary>
            Update internal state based on quater round function of ChaCha stream chiper.
            </summary>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.Tychei.AlgorithmName">
            <inheritdoc/>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.Tychei.Reseed">
            <inheritdoc/>
        </member>
        <member name="T:Litdex.Security.RNG.PRNG.WyRng">
            <summary>
            Based on Wyhash https://github.com/wangyi-fudan/wyhash
            </summary>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.WyRng.#ctor(System.UInt64)">
            <summary>
            Create <see cref="T:Litdex.Security.RNG.PRNG.WyRng"/> instance.
            </summary>
            <param name="seed">Seed.</param>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.WyRng.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.WyRng.Next">
            <inheritdoc/>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.WyRng.AlgorithmName">
            <inheritdoc/>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.WyRng.Reseed">
            <inheritdoc/>
        </member>
        <member name="T:Litdex.Security.RNG.PRNG.Xoroshiro128plus">
            <summary>
            Xoroshiro128plus PRNG is improved from Xoroshift128.
            http://xoroshiro.di.unimi.it/xoroshiro128plus.c
            </summary>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.Xoroshiro128plus.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.Xoroshiro128plus.#ctor(System.UInt64,System.UInt64)">
            <summary>
            Constructor with defined seed.
            </summary>
            <param name="seed1"></param>
            <param name="seed2"></param>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.Xoroshiro128plus.Next">
            <inheritdoc/>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.Xoroshiro128plus.AlgorithmName">
            <inheritdoc/>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.Xoroshiro128plus.Reseed">
            <inheritdoc/>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.Xoroshiro128plus.NextJump">
            <summary>
            2^64 calls to NextLong(), it can be used to generate 2^64
            non-overlapping subsequences for parallel computations.
            </summary>
        </member>
        <member name="T:Litdex.Security.RNG.PRNG.Xoroshiro128plusplus">
            <summary>
            http://prng.di.unimi.it/xoroshiro128plusplus.c
            </summary>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.Xoroshiro128plusplus.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.Xoroshiro128plusplus.#ctor(System.UInt64,System.UInt64)">
            <summary>
            Constructor with defined seed.
            </summary>
            <param name="seed1"></param>
            <param name="seed2"></param>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.Xoroshiro128plusplus.Next">
            <inheritdoc/>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.Xoroshiro128plusplus.AlgorithmName">
            <inheritdoc/>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.Xoroshiro128plusplus.Reseed">
            <inheritdoc/>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.Xoroshiro128plusplus.NextJump">
            <summary>
            2^64 calls to NextLong(), it can be used to generate 2^64
            non-overlapping subsequences for parallel computations.
            </summary>
        </member>
        <member name="T:Litdex.Security.RNG.PRNG.Xoroshiro128starstar">
            <summary>
            New family of xoroshiro.
            All general purpose generator.
            http://vigna.di.unimi.it/xorshift/xoroshiro128starstar.c
            </summary>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.Xoroshiro128starstar.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.Xoroshiro128starstar.#ctor(System.UInt64,System.UInt64)">
            <summary>
            Constructor with defined seed.
            </summary>
            <param name="seed1"></param>
            <param name="seed2"></param>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.Xoroshiro128starstar.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.Xoroshiro128starstar.Next">
            <inheritdoc/>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.Xoroshiro128starstar.NextInt(System.Int32)">
            <summary>
            Generates the next pseudorandom number Xoroshiro128starstar PRNG 
            integer value.
            </summary>
            <param name="bits"></param>
            <returns></returns>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.Xoroshiro128starstar.AlgorithmName">
            <inheritdoc/>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.Xoroshiro128starstar.Reseed">
            <inheritdoc/>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.Xoroshiro128starstar.NextJump">
            <summary>
            2^64 calls to NextLong(), it can be used to generate 2^64
            non-overlapping subsequences for parallel computations.
            </summary>
        </member>
        <member name="T:Litdex.Security.RNG.PRNG.Xoshiro256plus">
            <summary>
            RNG from xoroshiro family.
            http://vigna.di.unimi.it/xorshift/xoshiro256plus.c
            </summary>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.Xoshiro256plus.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.Xoshiro256plus.#ctor(System.UInt64[])">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.Xoshiro256plus.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.Xoshiro256plus.Next">
            <inheritdoc/>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.Xoshiro256plus.AlgorithmName">
            <inheritdoc/>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.Xoshiro256plus.Reseed">
            <inheritdoc/>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.Xoshiro256plus.NextJump">
            <summary>
            This is the jump function for the generator. It is equivalent
            to 2^128 calls to next(); it can be used to generate 2^128
            non-overlapping subsequences for parallel computations.
            </summary>
        </member>
        <member name="T:Litdex.Security.RNG.PRNG.Xoshiro256plusplus">
            <summary>
            RNG from xoroshiro family.
            http://prng.di.unimi.it/xoshiro256plusplus.c
            </summary>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.Xoshiro256plusplus.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.Xoshiro256plusplus.#ctor(System.UInt64[])">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.Xoshiro256plusplus.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.Xoshiro256plusplus.Next">
            <inheritdoc/>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.Xoshiro256plusplus.AlgorithmName">
            <inheritdoc/>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.Xoshiro256plusplus.Reseed">
            <inheritdoc/>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.Xoshiro256plusplus.NextJump">
            <summary>
            This is the jump function for the generator. It is equivalent
            to 2^128 calls to next(); it can be used to generate 2^128
            non-overlapping subsequences for parallel computations.
            </summary>
        </member>
        <member name="T:Litdex.Security.RNG.PRNG.Xoshiro256starstar">
            <summary>
            RNG from xoroshiro family.
            http://vigna.di.unimi.it/xorshift/xoshiro256starstar.c
            </summary>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.Xoshiro256starstar.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.Xoshiro256starstar.#ctor(System.UInt64[])">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.Xoshiro256starstar.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.Xoshiro256starstar.Next">
            <inheritdoc/>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.Xoshiro256starstar.AlgorithmName">
            <inheritdoc/>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.Xoshiro256starstar.Reseed">
            <inheritdoc/>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.Xoshiro256starstar.NextJump">
            <summary>
            This is the jump function for the generator. It is equivalent
            to 2^128 calls to next(); it can be used to generate 2^128
            non-overlapping subsequences for parallel computations.
            </summary>
        </member>
        <member name="T:Litdex.Security.RNG.PRNG.Xoshiro512plus">
            <summary>
            Xoshiro512+
            http://xoshiro.di.unimi.it/xoshiro512plus.c
            </summary>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.Xoshiro512plus.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.Xoshiro512plus.#ctor(System.UInt64[])">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.Xoshiro512plus.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.Xoshiro512plus.Next">
            <inheritdoc/>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.Xoshiro512plus.AlgorithmName">
            <inheritdoc/>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.Xoshiro512plus.Reseed">
            <inheritdoc/>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.Xoshiro512plus.NextJump">
            <summary>
            This is the jump function for the generator. It is equivalent
            to 2^256 calls to next(); it can be used to generate 2^256
            non-overlapping subsequences for parallel computations.
            </summary>
        </member>
        <member name="T:Litdex.Security.RNG.PRNG.Xoshiro512plusplus">
            <summary>
            Xoshiro512++
            http://xoshiro.di.unimi.it/xoshiro512plusplus.c
            </summary>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.Xoshiro512plusplus.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.Xoshiro512plusplus.#ctor(System.UInt64[])">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.Xoshiro512plusplus.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.Xoshiro512plusplus.Next">
            <inheritdoc/>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.Xoshiro512plusplus.AlgorithmName">
            <inheritdoc/>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.Xoshiro512plusplus.Reseed">
            <inheritdoc/>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.Xoshiro512plusplus.NextJump">
            <summary>
            This is the jump function for the generator. It is equivalent
            to 2^256 calls to next(); it can be used to generate 2^256
            non-overlapping subsequences for parallel computations.
            </summary>
        </member>
        <member name="T:Litdex.Security.RNG.PRNG.Xoshiro512starstar">
            <summary>
            Xoshiro512**
            http://xoshiro.di.unimi.it/xoshiro512starstar.c
            </summary>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.Xoshiro512starstar.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.Xoshiro512starstar.#ctor(System.UInt64[])">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.Xoshiro512starstar.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.Xoshiro512starstar.Next">
            <inheritdoc/>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.Xoshiro512starstar.AlgorithmName">
            <inheritdoc/>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.Xoshiro512starstar.Reseed">
            <inheritdoc/>
        </member>
        <member name="M:Litdex.Security.RNG.PRNG.Xoshiro512starstar.NextJump">
            <summary>
            This is the jump function for the generator. It is equivalent
            to 2^256 calls to next(); it can be used to generate 2^256
            non-overlapping subsequences for parallel computations.
            </summary>
        </member>
        <member name="T:Litdex.Security.RNG.Random">
            <summary>
            Base class of all random.
            </summary>
        </member>
        <member name="M:Litdex.Security.RNG.Random.AlgorithmName">
            <inheritdoc/>
        </member>
        <member name="M:Litdex.Security.RNG.Random.Reseed">
            <inheritdoc/>
        </member>
        <member name="M:Litdex.Security.RNG.Random.NextBoolean">
            <inheritdoc/>
        </member>
        <member name="M:Litdex.Security.RNG.Random.NextByte">
            <inheritdoc/>
        </member>
        <member name="M:Litdex.Security.RNG.Random.NextByte(System.Byte,System.Byte)">
            <inheritdoc/>
        </member>
        <member name="M:Litdex.Security.RNG.Random.NextBytes(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Litdex.Security.RNG.Random.NextInt">
            <inheritdoc/>
        </member>
        <member name="M:Litdex.Security.RNG.Random.NextInt(System.UInt32,System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:Litdex.Security.RNG.Random.NextIntFast(System.UInt32,System.UInt32,System.Boolean)">
            <summary>
            Lemire algorithm to generate <see cref="T:System.UInt32"/> value between 
            lower bound and upper bound from generator.
            </summary>
            <remarks>
            https://lemire.me/blog/2016/06/27/a-fast-alternative-to-the-modulo-reduction/
            </remarks>
            <param name="lower">
            Lower bound or expected minimum value.
            </param>
            <param name="upper">
            Upper bound or ecpected maximum value.
            </param>
            <param name="unbias">
            Determine using division for reduce bias.
            </param>
            <returns>
            <see cref="T:System.UInt32"/> value between lower bound and upper bound.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Lower bound is greater than or equal to upper bound.
            </exception>
        </member>
        <member name="M:Litdex.Security.RNG.Random.NextLong">
            <inheritdoc/>
        </member>
        <member name="M:Litdex.Security.RNG.Random.NextLong(System.UInt64,System.UInt64)">
            <inheritdoc/>
        </member>
        <member name="M:Litdex.Security.RNG.Random.NextDouble">
            <inheritdoc/>
        </member>
        <member name="M:Litdex.Security.RNG.Random.NextDouble(System.Double,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Litdex.Security.RNG.Random.Choice``1(``0[])">
            <inheritdoc/>
        </member>
        <member name="M:Litdex.Security.RNG.Random.Choice``1(``0[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Litdex.Security.RNG.Random.Choice``1(System.Collections.Generic.IList{``0})">
            <inheritdoc/>
        </member>
        <member name="M:Litdex.Security.RNG.Random.Choice``1(System.Collections.Generic.IList{``0},System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Litdex.Security.RNG.Random.Sample``1(``0[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Litdex.Security.RNG.Random.SampleAsync``1(``0[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Litdex.Security.RNG.Random.Shuffle``1(``0[])">
            <inheritdoc/>
        </member>
        <member name="M:Litdex.Security.RNG.Random.ShuffleAsync``1(``0[])">
            <inheritdoc/>
        </member>
        <member name="M:Litdex.Security.RNG.Random.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Litdex.Security.RNG.Random32">
            <summary>
            Base class for 32 bit RNG.
            </summary>
        </member>
        <member name="M:Litdex.Security.RNG.Random32.Next">
            <summary>
            Generate next random number.
            </summary>
            <returns>A 32-bit unsigned integer.</returns>
        </member>
        <member name="M:Litdex.Security.RNG.Random32.AlgorithmName">
            <inheritdoc/>
        </member>
        <member name="M:Litdex.Security.RNG.Random32.NextBoolean">
            <inheritdoc/>
        </member>
        <member name="M:Litdex.Security.RNG.Random32.NextBytes(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Litdex.Security.RNG.Random32.NextInt">
            <inheritdoc/>
        </member>
        <member name="M:Litdex.Security.RNG.Random32.NextLong">
            <inheritdoc/>
        </member>
        <member name="T:Litdex.Security.RNG.Random64">
            <summary>
            Base class for 64 bit RNG.
            </summary>
        </member>
        <member name="M:Litdex.Security.RNG.Random64.Next">
            <summary>
            Generate next random number.
            </summary>
            <returns>A 64-bit unsigned integer.</returns>
        </member>
        <member name="M:Litdex.Security.RNG.Random64.AlgorithmName">
            <inheritdoc/>
        </member>
        <member name="M:Litdex.Security.RNG.Random64.NextBoolean">
            <inheritdoc/>
        </member>
        <member name="M:Litdex.Security.RNG.Random64.NextBytes(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Litdex.Security.RNG.Random64.NextInt">
            <inheritdoc/>
        </member>
        <member name="M:Litdex.Security.RNG.Random64.NextLong">
            <inheritdoc/>
        </member>
    </members>
</doc>
